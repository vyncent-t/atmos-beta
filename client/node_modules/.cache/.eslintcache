[{"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\index.js":"1","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\App.js":"2","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\mainmenupage.js":"3","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\intropage.js":"4","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\dashboard.js":"5","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MainMenu.js":"6","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\WelcomeBack.js":"7","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Navbar.js":"8","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Welcome.js":"9","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoContent.js":"10","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicContent.js":"11","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicForm.js":"12","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoForm.js":"13","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicButton.js":"14","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoButton.js":"15","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\SpotifyState.js":"16","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\Content.js":"17","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\YouTubeState.js":"18","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\index.js":"19","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\UserControls.js":"20","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\welcomepage.js":"21","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\playlistCard.js":"22","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\pauseButton.js":"23","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\playButton.js":"24","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\resumeButton.js":"25","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\songSection.js":"26","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\songCard.js":"27","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Soundbar.js":"28","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\musicControls.js":"29","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\soundBar.js":"30","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PauseButton.js":"31","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlayButton.js":"32","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\ResumeButton.js":"33","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlaylistCard.js":"34","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SongSection.js":"35","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SongCard.js":"36","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SoundBar.js":"37","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicControls.js":"38","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlaylistSection.js":"39"},{"size":631,"mtime":1646857363003,"results":"40","hashOfConfig":"41"},{"size":743,"mtime":1649891000899,"results":"42","hashOfConfig":"41"},{"size":330,"mtime":1652219920607,"results":"43","hashOfConfig":"41"},{"size":3661,"mtime":1652215226359,"results":"44","hashOfConfig":"41"},{"size":670,"mtime":1652214880517,"results":"45","hashOfConfig":"41"},{"size":1032,"mtime":1652391130432,"results":"46","hashOfConfig":"41"},{"size":4584,"mtime":1652389060700,"results":"47","hashOfConfig":"41"},{"size":889,"mtime":1652220026198,"results":"48","hashOfConfig":"41"},{"size":2869,"mtime":1652387936777,"results":"49","hashOfConfig":"41"},{"size":3442,"mtime":1652389805265,"results":"50","hashOfConfig":"41"},{"size":326,"mtime":1652134724324,"results":"51","hashOfConfig":"41"},{"size":5409,"mtime":1652391057568,"results":"52","hashOfConfig":"41"},{"size":3349,"mtime":1652394744180,"results":"53","hashOfConfig":"41"},{"size":660,"mtime":1652218494455,"results":"54","hashOfConfig":"41"},{"size":694,"mtime":1652219277123,"results":"55","hashOfConfig":"41"},{"size":1404,"mtime":1652140854333,"results":"56","hashOfConfig":"41"},{"size":1315,"mtime":1636413272474,"results":"57","hashOfConfig":"41"},{"size":5524,"mtime":1652222446897,"results":"58","hashOfConfig":"41"},{"size":652,"mtime":1635536256482,"results":"59","hashOfConfig":"41"},{"size":1183,"mtime":1635536256481,"results":"60","hashOfConfig":"41"},{"size":1164,"mtime":1652215207900,"results":"61","hashOfConfig":"41"},{"size":829,"mtime":1650586261932,"results":"62","hashOfConfig":"41"},{"size":992,"mtime":1651689470121,"results":"63","hashOfConfig":"41"},{"size":1457,"mtime":1651176847671,"results":"64","hashOfConfig":"41"},{"size":916,"mtime":1650922507184,"results":"65","hashOfConfig":"41"},{"size":1493,"mtime":1652131451129,"results":"66","hashOfConfig":"41"},{"size":1431,"mtime":1652131438696,"results":"67","hashOfConfig":"41"},{"size":2397,"mtime":1651701728553,"results":"68","hashOfConfig":"41"},{"size":10779,"mtime":1652133957119,"results":"69","hashOfConfig":"41"},{"size":2397,"mtime":1651701728553,"results":"70","hashOfConfig":"41"},{"size":992,"mtime":1651689470121,"results":"71","hashOfConfig":"41"},{"size":1457,"mtime":1651176847671,"results":"72","hashOfConfig":"41"},{"size":916,"mtime":1650922507184,"results":"73","hashOfConfig":"41"},{"size":829,"mtime":1650586261932,"results":"74","hashOfConfig":"41"},{"size":1278,"mtime":1652201465798,"results":"75","hashOfConfig":"41"},{"size":1094,"mtime":1652389271753,"results":"76","hashOfConfig":"41"},{"size":3348,"mtime":1652394128830,"results":"77","hashOfConfig":"41"},{"size":12423,"mtime":1652392464280,"results":"78","hashOfConfig":"41"},{"size":6166,"mtime":1652200577688,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1jg53l1",{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"134"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"82"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"82"},"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\index.js",[],["174","175"],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\App.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\mainmenupage.js",["176"],"import MainMenu from '../components/MainMenu'\r\nimport styles from '../components/MainMenuStyles.module.css'\r\n\r\nimport AtmosNavbar from '../components/Navbar';\r\n\r\n\r\nfunction MainMenuPage() {\r\n    return (\r\n        <div>\r\n            <AtmosNavbar />\r\n            <MainMenu />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainMenuPage","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\intropage.js",["177"],"import { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router\"\r\nimport { useParams } from \"react-router\"\r\nimport { spotifyActions } from \"../store/SpotifyState\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport Welcome from \"../components/Welcome\"\r\nimport WelcomeBack from \"../components/WelcomeBack\"\r\n\r\n\r\nconst axios = require('axios')\r\n\r\nfunction Intropage() {\r\n    const location = useLocation()\r\n    console.log(location)\r\n    // the slice needs to be at 6 in order for the api call to work DO NOT TOUCH\r\n    let locationCode = location.search.slice(6)\r\n    console.log(`current location code from slice: ${locationCode}`)\r\n    console.log(`current location CODE SLICE from slice: ${location.search.slice(0, 6)}`)\r\n\r\n    // locationCode = location.search.slice(0, 6)\r\n\r\n    const params = useParams()\r\n    console.log(`current code from params ${params.musicAuthCode}`)\r\n\r\n    const musicPassword = useSelector((state) => state.spotify.authcode)\r\n    const musicToken = useSelector((state) => state.spotify.accesstoken)\r\n    const musicRefresh = useSelector((state) => state.spotify.refreshtoken)\r\n    const musicEx = useSelector((state) => state.spotify.expiresin)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    function spotifyAuthToggler() {\r\n        dispatch(spotifyActions.updateSpotifyAuth())\r\n    }\r\n\r\n    function userSpotifyAuthHandler() {\r\n\r\n        axios.get('/spotify-redirect').then(response => {\r\n            console.log(response.data)\r\n            window.location.href = `${response.data}`\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        // dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        // window.location.href = authlink\r\n        // requestSpotifyAuth()\r\n        // console.log(`current code from redirect button: ${musicPassword}`)\r\n    }\r\n\r\n\r\n    // const client_id = useSelector((state) => state.spotify.clientid)\r\n    // const client_secret = useSelector((state) => state.spotify.clientsecret)\r\n\r\n    // function requestSpotifyAuth() {\r\n    // const redirect_uri = \"http://localhost:3000\"\r\n    // const authlink = \"https://accounts.spotify.com/authorize\"\r\n    // var url = authlink;\r\n    // url += \"?client_id=\" + client_id;\r\n    // url += \"&response_type=code\";\r\n    // url += \"&redirect_uri=\" + encodeURI(redirect_uri);\r\n    // // url += \"&show_dialog=true\";\r\n    // // url += \"&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private\";\r\n    // window.location.href = url\r\n    // }\r\n\r\n    // first page load should fail, passes nothing into locationCode, should work on return\r\n\r\n\r\n    //console logging all state\r\n    console.log(`current token: ${musicToken}`)\r\n    console.log(`current code: ${musicPassword}`)\r\n    console.log(`current refresh: ${musicRefresh}`)\r\n    console.log(`current expire: ${musicEx}`)\r\n\r\n\r\n    // if (locationCode.length > 10) {\r\n    //     \r\n    // }\r\n\r\n\r\n    axios.get('/fruits').then(\r\n        (res) => {\r\n            console.log(res.data)\r\n        }\r\n    ).catch((error) => {\r\n        console.log(error)\r\n    })\r\n\r\n\r\n\r\n    if (locationCode.length > 20) {\r\n        dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        return (\r\n            <div>\r\n                <WelcomeBack newCode={locationCode} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <Welcome userWelcome={spotifyAuthToggler} onRedirect={userSpotifyAuthHandler} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Intropage","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\dashboard.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MainMenu.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\WelcomeBack.js",["178"],"import welcome from '../images/welcome.png';\r\nimport { useLocation } from \"react-router-dom\"\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './IntroStyles.module.css'\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n// the authCode is coming from the intro page, on redirect we trim the parameter that is the access code from spotify, then we pass it into the useAuth function that connects to server\r\nfunction WelcomeBack() {\r\n\r\n    const location = useLocation()\r\n    console.log(location)\r\n    let authCode = location.search.slice(6)\r\n    console.log(\"new code\")\r\n    console.log(authCode)\r\n    var accesstoken = \"no token right now\"\r\n\r\n\r\n\r\n    console.log(authCode)\r\n\r\n\r\n    localStorage.setItem(\"spotifyCode\", `${authCode}`)\r\n\r\n    // takes useAuth from utility, which runs the saveSpotify func from dispatch on store file, allows the user to be considered logged in, sets the exp, token, and other\r\n\r\n    // useAuth(authCode)\r\n\r\n    axios.post('/spotify-connect', {\r\n        code: `${authCode}`\r\n    }).then(\r\n        (res) => {\r\n            // the following is printed on the browser console\r\n            console.log(\"new access token\")\r\n            console.log(res)\r\n            console.log(`reading res data ${res.data}`)\r\n            // accesstoken = res.data.access_token\r\n            localStorage.setItem(\"spotifyToken\", `${res.data}`)\r\n        }\r\n    ).catch(\r\n        (error) => {\r\n            console.log(error)\r\n        }\r\n    )\r\n\r\n    // var accesstoken = useSelector((state) => state.spotify.accesstoken)\r\n    console.log(`welcome back comp loaded is current access token ${accesstoken}`)\r\n\r\n\r\n    return (\r\n        <div className={styles.intro_main}>\r\n\r\n            <div className={styles.intro_about}>\r\n                <div>\r\n                    <h5>Instructions</h5>\r\n                </div>\r\n                <div>\r\n                    <div className={styles.intro_tutorial}>\r\n                        <div className={styles.intro_card}>\r\n                            <h3>1. Prepare</h3>\r\n                            <div>\r\n                                <p>The first and most important step is to ready your listening device!</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    Open spotify on any platform (mobile app / desktop app / web browser) and play any track to test your connection to the spotify server.\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    You will be controlling your music from the dashboard later!\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.intro_card}>\r\n                            <h3>2. Choose</h3>\r\n                            <div>\r\n                                <p>Once you establish a connection to spotify on your device, continue to the menu.</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    At the menu, select the music genre you would like to listen to and the style of scenery you would like to watch.\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    You can return to the menu and change your content at anytime!\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.intro_card}>\r\n                            <h3>3. Relax</h3>\r\n                            <div>\r\n                                <p>Once you chose your music and scenery options you will be taken to the dashboard where your content will be loaded and play automatically.</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>Below the video are the controls for the music, feel free to adjust the volume, change the playlist, change a song!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.intro_button_box}>\r\n                    <Link to=\"/menu\" className={styles.intro_button}>Continue to menu</Link>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default WelcomeBack","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Navbar.js",["179"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport styles from './NavbarStyles.module.css'\r\n\r\n\r\nconst buttonStyles = {\r\n    cursor: 'pointer'\r\n}\r\nfunction AtmosNavbar() {\r\n\r\n    return (\r\n        <nav className={styles.navbar}>\r\n            <div className={styles.navbar_icon}>\r\n                <Link className={styles.navbar_navlinks} to=\"/\" >Atmos</Link>\r\n\r\n            </div>\r\n            <ul className={styles.navbar_navlist}>\r\n                <li>\r\n                    <Link className={styles.navbar_navlinks} to=\"/menu\" >Menu</Link>\r\n                </li>\r\n                <li>\r\n                    <Link className={styles.navbar_navlinks} to=\"/dashboard\" >Dashboard</Link>\r\n                </li>\r\n\r\n                {/* <Link to=\"/dashboard\"><img alt=\"room\" src={room}></img></Link> */}\r\n            </ul>\r\n        </nav>)\r\n}\r\n\r\nexport default AtmosNavbar","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Welcome.js",["180","181"],"import { useSelector } from \"react-redux\"\r\nimport title from '../images/title.png';\r\nimport tv from '../images/tvlogo.png';\r\nimport styles from './IntroStyles.module.css'\r\n\r\n//styling\r\n\r\n\r\nfunction Welcome(props) {\r\n\r\n    const isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\r\n    console.log(`welcome comp loaded is auth ${isAuth}`)\r\n\r\n    return (\r\n        <div className={styles.intro_main}>\r\n            <div className={styles.intro_about}>\r\n                <div>\r\n                    <h1>Welcome to Atmos</h1>\r\n                </div>\r\n                <div>\r\n                    <p>Come experience a new to unwind</p>\r\n                </div>\r\n                {!isAuth && (\r\n                    <div className={styles.intro_desc}>\r\n                        <div>\r\n                            <p>The Atmos project is a platform that allows you to enjoy both audio and visual media simultaneously to curate a relaxing environment tailored to you.</p>\r\n                        </div>\r\n                        <div>\r\n                            <p>The is achieved by using the Spotify API and Youtube API in order to provide you with a set of playlists curated by your choice of the music and scenery genre.</p>\r\n                        </div>\r\n\r\n                        <div className={styles.intro_attention}>\r\n                            <p>*PLEASE NOTE* The music component of this platform requires a Premium Spotify account! The Atmos Project will ask Spotify for authorization only to grant access to Spotify features.</p>\r\n                        </div>\r\n                        <div className={styles.intro_attention}>\r\n                            <p>ATMOS DOES NOT KEEP ANY DATA PROVIDED</p>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button className={styles.intro_button} onClick={props.userWelcome}>Agree</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {isAuth && (\r\n                    <div className={styles.intro_desc}>\r\n                        <div className={styles.intro_attention}>\r\n                            <p>Thank you!</p>\r\n                        </div>\r\n                        <div>\r\n                            <p>Before we continue you will need to be redirected to the official Spotify website to authorize your music session.</p>\r\n                        </div>\r\n                        <div>\r\n                            <p>You will be redirected back once you're done!</p>\r\n                        </div>\r\n                        <div>\r\n                            <button className={styles.intro_button} onClick={props.onRedirect}>Authorize on Spotify</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Welcome","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoContent.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicContent.js",["182","183"],"\r\nimport PauseButton from \"./PauseButton\"\r\nimport PlayButton from \"./PlayButton\"\r\nimport PlaylistSection from \"./PlaylistSection\"\r\n\r\n\r\nfunction MusicContent() {\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <PlaylistSection />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicContent\r\n","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicForm.js",["184"],"import MusicButton from \"./MusicButton\"\r\nimport { useEffect } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport styles from \"./ContentMenuStyles.module.css\"\r\n\r\nconst axios = require('axios')\r\n\r\n\r\nfunction MusicForm(props) {\r\n    const musicToken = localStorage.getItem(\"spotifyToken\")\r\n    console.log(`need the normal music token ${musicToken}`)\r\n    const musicChoice = useSelector((state) => state.content.musicButtonChoice)\r\n\r\n    // this function will be ran within the promise of each api req below, it will take the entire response object and select the first 10 playlist items to be saved in local storage\r\n\r\n    function updateMusicContent(content) {\r\n        for (let i = 0; i < 10; i++) {\r\n            localStorage.setItem(`musicplaylistcode${i}`, `${content[i]}`)\r\n        }\r\n    }\r\n\r\n\r\n    // by default the fresh menu has a value of \"none\" for the music genre playlist, this makes the default data search for peaceful unless a music genre is clicked, making the musicChoice variable change - but the button to create a room isnt going to render unless the user clicks both music and video options\r\n\r\n    if (musicChoice === \"none\") {\r\n\r\n        axios.post('/spotify-set', {\r\n            userData: {\r\n                musicKey: \"peaceful\",\r\n                accessToken: `${musicToken}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(`music playlist res:`, res)\r\n                // the following is printed on the browser console\r\n                console.log(`user custom music for default`)\r\n                // response print from the spotify custom you need to expand in browser console\r\n                console.log(res)\r\n                console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                console.log(`reading music playlist res: `, res.data.playlists.items)\r\n\r\n                // now we use the function from above\r\n\r\n                var playlistMusicItems = res.data.playlists.items\r\n                var playlistCodes = playlistMusicItems.map(playlistCode => {\r\n                    return playlistCode.id\r\n                })\r\n                updateMusicContent(playlistCodes)\r\n                var playlistZeroID = localStorage.getItem(`musicplaylistcode0`)\r\n                console.log(\"playlist zero preload ID: \", playlistZeroID)\r\n            }\r\n        ).catch(\r\n            (error) => {\r\n                console.log(error)\r\n            }\r\n        )\r\n    } else {\r\n        axios.post('/spotify-set', {\r\n            userData: {\r\n                musicKey: `relax ${musicChoice}`,\r\n                accessToken: `${musicToken}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(`music playlist res:`, res)\r\n                // the following is printed on the browser console\r\n                console.log(`user custom music for ${musicChoice}`)\r\n                // response print from the spotify custom you need to expand in browser console\r\n                console.log(res)\r\n                console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                console.log(`reading music playlist res: `, res.data.playlists.items)\r\n\r\n                // now we use the function from above\r\n\r\n                var playlistMusicItems = res.data.playlists.items\r\n                var playlistCodes = playlistMusicItems.map(playlist => {\r\n                    return playlist.id\r\n                })\r\n                updateMusicContent(playlistCodes)\r\n                var playlistZeroID = localStorage.getItem(`musicplaylistcode0`)\r\n                console.log(\"playlist zero preload ID: \", playlistZeroID)\r\n            }\r\n        ).catch(\r\n            (error) => {\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.form_container}>\r\n            <h3>Music Choice</h3>\r\n            {(musicChoice === \"none\") ? <h4>No music chosen</h4> : <h4>{musicChoice}</h4>}\r\n            <div className={styles.choice_container}>\r\n                <div className={styles.form_choice}>\r\n                    <MusicButton musicKeyword=\"Piano\" />\r\n                    <MusicButton musicKeyword=\"Coffee Shop\" />\r\n                    <MusicButton musicKeyword=\"Acoustic\" />\r\n                    <MusicButton musicKeyword=\"Lofi\" />\r\n                    <MusicButton musicKeyword=\"Vaperwave\" />\r\n                    <MusicButton musicKeyword=\"Classical\" />\r\n                    <MusicButton musicKeyword=\"Jazz\" />\r\n                    <MusicButton musicKeyword=\"Trance\" />\r\n                    <MusicButton musicKeyword=\"Folk\" />\r\n                    <MusicButton musicKeyword=\"Cooking\" />\r\n                    <MusicButton musicKeyword=\"Christmas\" />\r\n                    <MusicButton musicKeyword=\"Fantasy\" />\r\n                    <MusicButton musicKeyword=\"Anime\" />\r\n                    <MusicButton musicKeyword=\"Video Game\" />\r\n                    <MusicButton musicKeyword=\"Dungeons and dragons\" />\r\n                    <MusicButton musicKeyword=\"Focus\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicForm","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoForm.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\VideoButton.js",["185"],"import { useDispatch } from \"react-redux\"\r\nimport { youtubeActions } from \"../store/YouTubeState\"\r\nimport { Fragment } from \"react\"\r\nimport styles from \"./ContentMenuStyles.module.css\"\r\n\r\n\r\nfunction VideoButton(props) {\r\n    const keyword = props.videoKeyword\r\n    const dispatch = useDispatch()\r\n\r\n    const setVideoGenre = () => {\r\n        dispatch(youtubeActions.updateChosen(keyword))\r\n        console.log(`user chose ${keyword} as their video choice via button`)\r\n    }\r\n    return (\r\n        <div className={styles.choice_button_box}>\r\n            <button className={styles.choice_button} onClick={setVideoGenre}>{keyword}</button>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default VideoButton","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\SpotifyState.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\Content.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\YouTubeState.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\index.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\store\\UserControls.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\pages\\welcomepage.js",["186"],"\r\n\r\nimport { useNavigate } from \"react-router\"\r\nimport { useParams } from \"react-router\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport WelcomeBack from \"../components/WelcomeBack\"\r\n\r\nconst axios = require('axios')\r\n\r\nfunction WelcomePage() {\r\n    const location = useLocation()\r\n    console.log(location)\r\n    // the slice needs to be at 6 in order for the api call to work DO NOT TOUCH\r\n    let locationCode = location.search.slice(6)\r\n    console.log(`current location code from slice: ${locationCode}`)\r\n    console.log(`current location CODE SLICE from slice: ${location.search.slice(0, 6)}`)\r\n\r\n    // locationCode = location.search.slice(0, 6)\r\n\r\n    const params = useParams()\r\n    console.log(`current code from params ${params.musicAuthCode}`)\r\n\r\n\r\n    // first page load should fail, passes nothing into locationCode, should work on return\r\n\r\n    axios.get('/fruits').then(\r\n        (res) => {\r\n            console.log(res.data)\r\n        }\r\n    ).catch((error) => {\r\n        console.log(error)\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <WelcomeBack newCode={locationCode} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default WelcomePage","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\playlistCard.js",[],["187","188"],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\pauseButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\playButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\resumeButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\songSection.js",["189","190","191","192"],"import React, { Fragment, useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\nimport MusicControls from \"./musicControls\";\r\n\r\nimport SongCard from \"./songCard\"\r\n\r\n\r\n\r\nfunction SongSection(props) {\r\n\r\n\r\n    // init the props object entirely\r\n    let musicInfo = props\r\n    console.log(\"props from song section\")\r\n    console.log(musicInfo)\r\n\r\n    // asign a piece from the object\r\n    let musicArray = props.trackList\r\n    console.log(\"props from track list section array\")\r\n    console.log(musicArray)\r\n\r\n    // console.log(musicArray.length)\r\n\r\n    // let arrayTracks = []\r\n\r\n    // const [musicTracks, setMusicTracks] = useState([])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n            </div>\r\n            <MusicControls songList={musicArray} />\r\n            {/* {props.trackList &&\r\n                <div>\r\n                    {props.trackList.map(\r\n                        (song, index) => (\r\n                            <SongCard\r\n                                uri={song.track.uri}\r\n                                name={song.track.name}\r\n                                // album={song.track.album.name}\r\n                                artist={song.track.artists[0].name}\r\n                                id={song.track.id}\r\n                                href={song.track.href}\r\n                            />\r\n                        )\r\n                    )}\r\n                </div>\r\n            } */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongSection","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\songCard.js",["193","194","195","196","197","198"],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\Soundbar.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\musicControls.js",["199","200","201","202","203","204","205","206","207","208"],"import PauseButton from \"./PauseButton\"\r\nimport PlayButton from \"./PlayButton\"\r\nimport ResumeButton from \"./ResumeButton\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport SongCard from \"./SongCard\"\r\nimport Soundbar from \"./SoundBar\"\r\n\r\n\r\n\r\nconst axios = require('axios')\r\n\r\nfunction MusicControls(props) {\r\n\r\n    let token = localStorage.getItem(\"spotifyToken\")\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n    const [songDuration, setSongDuration] = useState(0)\r\n    const [musicPlaying, setMusicPlaying] = useState(null)\r\n    const [musicPlayTime, setMusicPlayTime] = useState(0)\r\n    const [autoPlayOn, setAutoPlayOn] = useState(true)\r\n    const [randomOn, setRandomOn] = useState(false)\r\n    const [repeatOn, setRepeatOn] = useState(false)\r\n\r\n    function nextSongHandler() {\r\n        let nextSong = parseInt(songArrayNum) + 1\r\n        setSongArrayNumber(nextSong)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        let lastSong = parseInt(songArrayNum) - 1\r\n\r\n        setSongArrayNumber(lastSong)\r\n    }\r\n\r\n\r\n    function randomToggler() {\r\n        setRandomOn(!randomOn)\r\n    }\r\n\r\n\r\n    function repeatToggler() {\r\n        setRepeatOn(!repeatOn)\r\n    }\r\n\r\n\r\n\r\n    const [currentSongInfo, setCurrentSongInfo] = useState(null)\r\n\r\n\r\n    const [currentSong, setCurrentSong] = useState()\r\n\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n\r\n    let musicArrayList = props.songList\r\n\r\n\r\n    console.log(\"controls array\")\r\n    console.log(musicArrayList)\r\n\r\n\r\n\r\n    function songMaker(song) {\r\n        console.log(\"song maker before setting song\")\r\n        console.log(song)\r\n        setCurrentSong(\r\n            () => song\r\n        )\r\n        console.log(\"currentsong after set\")\r\n        console.log(currentSong)\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!props.songList) return\r\n            songMaker(props.songList[songArrayNum].track)\r\n        }, [songArrayNum]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!currentSong) return\r\n            playSong(currentSong.uri)\r\n            setSongDuration((parseInt(currentSong.duration_ms)))\r\n            // reset the playtime to 0 for new song\r\n            setMusicPlayTime(0)\r\n        }, [currentSong]\r\n    )\r\n\r\n\r\n    console.log(\"data from current song in song conrols\")\r\n\r\n\r\n    function playSong(songCode) {\r\n        setMusicPlaying(true)\r\n        axios.post('/spotify-play-music', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n                musicURI: songCode\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"play worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function pauseSong() {\r\n        setMusicPlaying(false)\r\n        // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\r\n        console.log(\"pausing music\")\r\n        axios.post('/spotify-pause', {\r\n            userData: {\r\n                accessToken: `${token}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"pause worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function resumeSong() {\r\n        setMusicPlaying(true)\r\n        console.log(\"resume music\")\r\n        axios.post('/spotify-resume', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"resume worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    function autoPlayOnHandler(song) {\r\n        console.log(\"auto play now on\")\r\n        setAutoPlayOn(true)\r\n        playSong(song)\r\n    }\r\n\r\n    function autoPlayOffHandler(song) {\r\n        console.log(\"auto play now off\")\r\n        setAutoPlayOn(false)\r\n        // playSong(song)\r\n    }\r\n\r\n    function songArrayHandle(event) {\r\n        console.log(`now printing for array placement ${event.target.value\r\n            }`)\r\n\r\n        setSongArrayNumber(event.target.value)\r\n        console.log(songArrayNum)\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            let interval = null\r\n            if (musicPlaying) {\r\n                interval = setInterval(() => {\r\n                    setMusicPlayTime(musicPlayTime + 5000)\r\n                }, 5000)\r\n\r\n                if ((musicPlayTime >= songDuration) && autoPlayOn) {\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n\r\n                    console.log(\"next song playing from auto play\")\r\n                    let nextSong = parseInt(songArrayNum) + 1\r\n                    setSongArrayNumber(nextSong)\r\n                }\r\n\r\n                if ((musicPlayTime > songDuration) && !autoPlayOn) {\r\n                    // set song to complete time\r\n                    setMusicPlayTime(songDuration)\r\n                }\r\n            } else {\r\n                console.log(\"no music playing\")\r\n            }\r\n            return () => { clearInterval(interval) }\r\n        }, [musicPlayTime, musicPlaying, songDuration, autoPlayOn, songArrayNum]\r\n    )\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (repeatOn) {\r\n                if (musicPlayTime > songDuration) {\r\n                    playSong(currentSong.uri)\r\n                    setSongDuration((parseInt(currentSong.duration_ms)))\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n                }\r\n            }\r\n        }, [currentSong, repeatOn, musicPlayTime, songDuration]\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentSong ?\r\n                (\r\n                    <div className=\"rounded m-3 p-3\">\r\n                        <div>\r\n                            <h1>music controls</h1>\r\n                            <div className=\"bg-info d-flex p-2 m-2\">\r\n                                <div>\r\n                                    {\r\n                                        autoPlayOn ? (\r\n                                            <div>\r\n                                                <button className=\"btn btn-success\" onClick={\r\n                                                    autoPlayOffHandler} >Disable Auto Play</button>\r\n                                            </div>\r\n                                        ) : <div>\r\n                                            <button className=\"btn btn-success\" onClick={\r\n                                                () => { autoPlayOnHandler(currentSong.uri) }\r\n                                            }>Enable Auto Play</button>\r\n                                        </div>\r\n                                    }\r\n                                    <div>\r\n                                        now listening to {currentSong.name} {currentSong.uri}\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    {songArrayNum > 0 &&\r\n                                        <button className=\"btn btn-light m-1\" onClick={prevSongHandler}>prev track</button>\r\n                                    }\r\n\r\n                                    {\r\n                                        songArrayNum < 100 &&\r\n                                        <button className=\"btn btn-light m-1\" onClick={nextSongHandler}>next track</button>\r\n                                    }\r\n                                </div>\r\n\r\n                                {musicPlaying && <div>PLAYING MUSIC</div>}\r\n                                {!musicPlaying && <div>NO MUSIC</div>}\r\n\r\n                                <div>\r\n                                    current place in array {songArrayNum}\r\n                                </div>\r\n                                <div>\r\n                                    current song duration {songDuration}\r\n                                </div>\r\n                                <div>\r\n                                    current song play time {musicPlayTime}\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <button className=\"m-1 btn btn-light\" onClick={() => { pauseSong() }}>Pause</button>\r\n                                    <button className=\"m-1 btn btn-light\" onClick={() => { resumeSong() }}>Resume</button>\r\n                                </div>\r\n                                <div>\r\n                                    <Soundbar />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {musicArrayList &&\r\n                            <div>\r\n                                {musicArrayList.map(\r\n                                    (song, index) => (\r\n                                        <div>\r\n                                            <SongCard\r\n                                                place={index}\r\n                                                arrayNum={songArrayNum}\r\n                                                uri={song.track.uri}\r\n                                                name={song.track.name}\r\n                                                // album={song.track.album.name}\r\n                                                artist={song.track.artists[0].name}\r\n                                                id={song.track.id}\r\n                                                href={song.track.href}\r\n                                            />\r\n                                            <span>\r\n                                                <button className=\"btn btn-primary\" value={index} onClick={songArrayHandle}>Play</button>\r\n                                            </span>\r\n                                        </div>\r\n                                    )\r\n                                )}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                ) :\r\n                (<div>Loading...</div>)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls",["209","210"],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\soundBar.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PauseButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlayButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\ResumeButton.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlaylistCard.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SongSection.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SongCard.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\SoundBar.js",[],"C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\MusicControls.js",["211","212","213","214","215","216","217","218","219","220"],"import PauseButton from \"./PauseButton\"\r\nimport PlayButton from \"./PlayButton\"\r\nimport ResumeButton from \"./ResumeButton\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport SongCard from \"./SongCard\"\r\nimport Soundbar from \"./SoundBar\"\r\nimport styles from './MusicControlStyles.module.css'\r\n\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\nconst axios = require('axios')\r\n\r\nfunction MusicControls(props) {\r\n\r\n    let token = localStorage.getItem(\"spotifyToken\")\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n    const [songDuration, setSongDuration] = useState(0)\r\n    const [musicPlaying, setMusicPlaying] = useState(null)\r\n    const [musicPlayTime, setMusicPlayTime] = useState(0)\r\n    const [autoPlayOn, setAutoPlayOn] = useState(true)\r\n    const [randomOn, setRandomOn] = useState(false)\r\n    const [repeatOn, setRepeatOn] = useState(false)\r\n\r\n    function nextSongHandler() {\r\n        let nextSong = parseInt(songArrayNum) + 1\r\n        setSongArrayNumber(nextSong)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        let lastSong = parseInt(songArrayNum) - 1\r\n\r\n        setSongArrayNumber(lastSong)\r\n    }\r\n\r\n\r\n    function randomToggler() {\r\n        setRandomOn(!randomOn)\r\n    }\r\n\r\n\r\n    function repeatToggler() {\r\n        setRepeatOn(!repeatOn)\r\n    }\r\n\r\n\r\n\r\n    const [currentSongInfo, setCurrentSongInfo] = useState(null)\r\n\r\n\r\n    const [currentSong, setCurrentSong] = useState()\r\n\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n\r\n    let musicArrayList = props.songList\r\n\r\n\r\n    console.log(\"controls array\")\r\n    console.log(musicArrayList)\r\n\r\n\r\n\r\n    function songMaker(song) {\r\n        console.log(\"song maker before setting song\")\r\n        console.log(song)\r\n        setCurrentSong(\r\n            () => song\r\n        )\r\n        console.log(\"currentsong after set\")\r\n        console.log(currentSong)\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!props.songList) return\r\n            songMaker(props.songList[songArrayNum].track)\r\n        }, [songArrayNum]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!currentSong) return\r\n            playSong(currentSong.uri)\r\n            setSongDuration((parseInt(currentSong.duration_ms)))\r\n            // reset the playtime to 0 for new song\r\n            setMusicPlayTime(0)\r\n        }, [currentSong]\r\n    )\r\n\r\n\r\n    console.log(\"data from current song in song conrols\")\r\n\r\n\r\n    function playSong(songCode) {\r\n        setMusicPlaying(true)\r\n        axios.post('/spotify-play-music', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n                musicURI: songCode\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"play worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function pauseSong() {\r\n        setMusicPlaying(false)\r\n        // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\r\n        console.log(\"pausing music\")\r\n        axios.post('/spotify-pause', {\r\n            userData: {\r\n                accessToken: `${token}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"pause worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function resumeSong() {\r\n        setMusicPlaying(true)\r\n        console.log(\"resume music\")\r\n        axios.post('/spotify-resume', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"resume worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    function autoPlayOnHandler(song) {\r\n        console.log(\"auto play now on\")\r\n        setAutoPlayOn(true)\r\n        playSong(song)\r\n    }\r\n\r\n    function autoPlayOffHandler(song) {\r\n        console.log(\"auto play now off\")\r\n        setAutoPlayOn(false)\r\n        // playSong(song)\r\n    }\r\n\r\n    function songArrayHandle(event) {\r\n        console.log(`now printing for array placement ${event.target.value\r\n            }`)\r\n\r\n        setSongArrayNumber(event.target.value)\r\n        console.log(songArrayNum)\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            let interval = null\r\n            if (musicPlaying) {\r\n                interval = setInterval(() => {\r\n                    setMusicPlayTime(musicPlayTime + 5000)\r\n                }, 5000)\r\n\r\n                if ((musicPlayTime >= songDuration) && autoPlayOn) {\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n\r\n                    console.log(\"next song playing from auto play\")\r\n                    let nextSong = parseInt(songArrayNum) + 1\r\n                    setSongArrayNumber(nextSong)\r\n                }\r\n\r\n                if ((musicPlayTime > songDuration) && !autoPlayOn) {\r\n                    // set song to complete time\r\n                    setMusicPlayTime(songDuration)\r\n                }\r\n            } else {\r\n                console.log(\"no music playing\")\r\n            }\r\n            return () => { clearInterval(interval) }\r\n        }, [musicPlayTime, musicPlaying, songDuration, autoPlayOn, songArrayNum]\r\n    )\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (repeatOn) {\r\n                if (musicPlayTime > songDuration) {\r\n                    playSong(currentSong.uri)\r\n                    setSongDuration((parseInt(currentSong.duration_ms)))\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n                }\r\n            }\r\n        }, [currentSong, repeatOn, musicPlayTime, songDuration]\r\n    )\r\n\r\n    function millisToMinutes(millis) {\r\n        var minutes = Math.floor(millis / 60000);\r\n        var seconds = ((millis % 60000) / 1000).toFixed(0)\r\n        return `${minutes} : ${seconds}`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {currentSong ?\r\n                (\r\n                    <div >\r\n                        <div>\r\n                            <div className={styles.music_controls}>\r\n                                <div className={styles.track_controls}>\r\n                                    {\r\n                                        autoPlayOn ? (\r\n                                            <div>\r\n\r\n                                                <button className={styles.control_button} onClick={\r\n                                                    autoPlayOffHandler} >Disable Auto Play</button>\r\n                                            </div>\r\n                                        ) : <div>\r\n                                            <button className={styles.control_button} onClick={\r\n                                                () => { autoPlayOnHandler(currentSong.uri) }\r\n                                            }>Enable Auto Play</button>\r\n                                        </div>\r\n                                    }\r\n                                    {songArrayNum > 0 &&\r\n                                        <div>\r\n                                            <button className={styles.control_button} onClick={prevSongHandler}>prev track</button>\r\n                                        </div>\r\n                                    }\r\n\r\n                                    {\r\n                                        songArrayNum < 100 &&\r\n                                        <div>\r\n                                            <button className={styles.control_button} onClick={nextSongHandler}>next track</button>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                <div className={styles.track_info}>\r\n                                    {/* <div>\r\n                                        now listening to {currentSong.name} {currentSong.uri}\r\n                                    </div> */}\r\n                                    <div className={styles.track_name}>\r\n                                        <div>Now listening to</div>\r\n                                        <div>{currentSong.name}</div>\r\n                                    </div>\r\n\r\n                                    <div className={styles.track_time}>\r\n                                        <div>\r\n                                            {millisToMinutes(musicPlayTime)} / {millisToMinutes(songDuration)}\r\n                                        </div>\r\n                                        {/* <div>\r\n                                            current place in array {songArrayNum}\r\n                                        </div> */}\r\n                                        {/* <div>\r\n                                            current song duration {songDuration}\r\n                                        </div> */}\r\n                                        {/* <div>\r\n                                            current song play time {musicPlayTime}\r\n                                        </div> */}\r\n                                    </div>\r\n\r\n\r\n                                    <div className={styles.audio_controls}>\r\n                                        {musicPlaying && <div>\r\n                                            <button className={styles.control_button} onClick={() => { pauseSong() }}>\r\n                                                <PauseIcon />\r\n                                            </button>\r\n                                        </div>}\r\n\r\n                                        {!musicPlaying && <div>\r\n                                            <button className={styles.control_button} onClick={() => { resumeSong() }}><PlayArrowIcon /></button>\r\n                                        </div>}\r\n                                        <Soundbar />\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className={styles.song_section}>\r\n                            <div className={styles.song_container}>\r\n                                <h3>Tracks</h3>\r\n                                {musicArrayList &&\r\n                                    <div className={styles.song_list}>\r\n                                        {musicArrayList.map(\r\n                                            (song, index) => (\r\n                                                <div className={styles.song_item}>\r\n                                                    <SongCard\r\n                                                        place={index}\r\n                                                        arrayNum={songArrayNum}\r\n                                                        uri={song.track.uri}\r\n                                                        name={song.track.name}\r\n                                                        // album={song.track.album.name}\r\n                                                        artist={song.track.artists[0].name}\r\n                                                        id={song.track.id}\r\n                                                        href={song.track.href}\r\n                                                    />\r\n                                                    <div>\r\n                                                        <button className={styles.control_button} value={index} onClick={songArrayHandle}><PlayArrowIcon /></button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        )}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                ) :\r\n                (<div>Loading...</div>)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls","C:\\Users\\jento\\Desktop\\Projects\\main projects\\atmos-project\\client\\src\\components\\PlaylistSection.js",["221","222"],"import React, { Fragment, useEffect } from \"react\";\r\n\r\nimport { useState } from \"react\"\r\nimport SongSection from \"./SongSection\";\r\n\r\nimport styles from \"./PlaylistSectionStyles.module.css\"\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction PlaylistSection(props) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // use state in order to select a playlist id from local storage\r\n    const [playlistArrayNum, setPlaylistArrayNumber] = useState(0)\r\n\r\n    function nextPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum + 1)\r\n    }\r\n\r\n    function prevPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum - 1)\r\n    }\r\n\r\n    // if (playlistArrayNum < -1) {\r\n    //     nextPlaylistHandler()\r\n    // }\r\n\r\n    // if (playlistArrayNum > 10) {\r\n    //     prevPlaylistHandler()\r\n    // }\r\n\r\n\r\n    const [playlistInfo, setPlaylistInfo] = useState({})\r\n\r\n\r\n    let songList = []\r\n\r\n\r\n    var accessToken = localStorage.getItem(\"spotifyToken\")\r\n\r\n    var playlistID = localStorage.getItem(`musicplaylistcode${playlistArrayNum}`)\r\n    console.log(`current spotify playlist`, playlistID)\r\n\r\n    const [currentPlaylist, setCurrentPlaylist] = useState(playlistID)\r\n    console.log(\"CURRENT PLAYLIST\", currentPlaylist)\r\n\r\n\r\n    function updateSongList(array) {\r\n        let songList = array\r\n        console.log(\"song array\")\r\n        console.log(songList)\r\n        return songList\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            setCurrentPlaylist(playlistID)\r\n            console.log(\"playlist ID taken from local storage\", playlistID)\r\n            // function updatePlaylistCode(ID){\r\n            //     setCurrentPlaylist(playlistID)\r\n            //     return playlistID\r\n            // }\r\n\r\n            // updatePlaylistInfo()\r\n            // axios calls whenever the playlistID changes\r\n            axios.post('/spotify-playlist', {\r\n                userData: {\r\n                    playlistID: `${playlistID}`,\r\n                    accessToken: `${accessToken}`\r\n                }\r\n            }).then(\r\n                (res) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(`music playlist res ID ${playlistID}`, res)\r\n                    // the following is printed on the browser console\r\n                    console.log(`below is the whole res`)\r\n                    // response print from the spotify custom you need to expand in browser console\r\n                    console.log(res)\r\n                    console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                    // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                    console.log(`reading music playlist res: `, res.data)\r\n\r\n                    // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\r\n\r\n                    // var playlistMusicItems = res.data\r\n                    // var playlistCodes = playlistMusicItems.map(playlistCode => {\r\n                    //     return playlistCode.id\r\n                    // })\r\n                    // updateMusicContent(playlistCodes)\r\n\r\n                    // updatePlaylistInfo(res.data)\r\n\r\n                    setPlaylistInfo(\r\n                        () => {\r\n                            playlistInfo.name = res.data.name\r\n                            playlistInfo.uri = res.data.uri\r\n                            playlistInfo.description = res.data.description\r\n                            playlistInfo.href = res.data.href\r\n                            playlistInfo.id = res.data.id\r\n                            playlistInfo.image = res.data.images[0].url\r\n                            playlistInfo.external_url = res.data.external_urls\r\n                            playlistInfo.tracks = res.data.tracks.items\r\n\r\n                            console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo)\r\n                            return playlistInfo\r\n                        }\r\n                    )\r\n                    updateSongList(res.data.tracks.items)\r\n\r\n                    // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n                    setIsLoading(true)\r\n                    console.log(\"SET PLAYLIST IS NOW\", playlistInfo)\r\n                    setIsLoading(false)\r\n\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(error)\r\n                }\r\n            )\r\n        }, [playlistID]\r\n    )\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {isLoading && <div>Loading...</div>}\r\n            {!isLoading &&\r\n                <div className={styles.playlist_section}>\r\n                    <div className={styles.playlist_card}>\r\n                        <div className={styles.playlist_info}>\r\n                            <div className={styles.playlist_button_box}>\r\n                                {(playlistArrayNum > 0) && <button className={styles.playlist_button} onClick={prevPlaylistHandler}>prev playlist</button>}\r\n                                {(playlistArrayNum < 9) && <button className={styles.playlist_button} onClick={nextPlaylistHandler}>next playlist</button>}\r\n                            </div>\r\n                            <div>\r\n                                <h2 className={styles.playlist_title}>Current Playlist</h2>\r\n                                <h3>{playlistInfo.name}</h3>\r\n                            </div>\r\n                            <img className={styles.playlist_image} src={playlistInfo.image} alt=\"playlist graphic\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.playlist_song_section}>\r\n                        {!isLoading && <SongSection trackList={playlistInfo.tracks} />}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PlaylistSection",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":14},{"ruleId":"227","severity":1,"message":"231","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"232","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":15},{"ruleId":"227","severity":1,"message":"233","line":7,"column":7,"nodeType":"229","messageId":"230","endLine":7,"endColumn":19},{"ruleId":"227","severity":1,"message":"234","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":13},{"ruleId":"227","severity":1,"message":"235","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":10},{"ruleId":"227","severity":1,"message":"236","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":19},{"ruleId":"227","severity":1,"message":"237","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":18},{"ruleId":"227","severity":1,"message":"238","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":19},{"ruleId":"227","severity":1,"message":"239","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":18},{"ruleId":"227","severity":1,"message":"231","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":21},{"ruleId":"223","replacedBy":"240"},{"ruleId":"225","replacedBy":"241"},{"ruleId":"227","severity":1,"message":"239","line":1,"column":17,"nodeType":"229","messageId":"230","endLine":1,"endColumn":25},{"ruleId":"227","severity":1,"message":"238","line":1,"column":27,"nodeType":"229","messageId":"230","endLine":1,"endColumn":36},{"ruleId":"227","severity":1,"message":"242","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":18},{"ruleId":"227","severity":1,"message":"243","line":5,"column":8,"nodeType":"229","messageId":"230","endLine":5,"endColumn":16},{"ruleId":"227","severity":1,"message":"236","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":19},{"ruleId":"227","severity":1,"message":"237","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":18},{"ruleId":"227","severity":1,"message":"244","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":20},{"ruleId":"227","severity":1,"message":"238","line":5,"column":10,"nodeType":"229","messageId":"230","endLine":5,"endColumn":19},{"ruleId":"227","severity":1,"message":"245","line":10,"column":12,"nodeType":"229","messageId":"230","endLine":10,"endColumn":24},{"ruleId":"227","severity":1,"message":"246","line":10,"column":26,"nodeType":"229","messageId":"230","endLine":10,"endColumn":44},{"ruleId":"227","severity":1,"message":"236","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":19},{"ruleId":"227","severity":1,"message":"237","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":18},{"ruleId":"227","severity":1,"message":"244","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":20},{"ruleId":"227","severity":1,"message":"247","line":38,"column":14,"nodeType":"229","messageId":"230","endLine":38,"endColumn":27},{"ruleId":"227","severity":1,"message":"248","line":43,"column":14,"nodeType":"229","messageId":"230","endLine":43,"endColumn":27},{"ruleId":"227","severity":1,"message":"249","line":49,"column":12,"nodeType":"229","messageId":"230","endLine":49,"endColumn":27},{"ruleId":"227","severity":1,"message":"250","line":49,"column":29,"nodeType":"229","messageId":"230","endLine":49,"endColumn":47},{"ruleId":"251","severity":1,"message":"252","line":83,"column":12,"nodeType":"253","endLine":83,"endColumn":26,"suggestions":"254"},{"ruleId":"251","severity":1,"message":"255","line":93,"column":12,"nodeType":"253","endLine":93,"endColumn":25,"suggestions":"256"},{"ruleId":"251","severity":1,"message":"255","line":219,"column":12,"nodeType":"253","endLine":219,"endColumn":64,"suggestions":"257"},{"ruleId":"223","replacedBy":"258"},{"ruleId":"225","replacedBy":"259"},{"ruleId":"227","severity":1,"message":"236","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":19},{"ruleId":"227","severity":1,"message":"237","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":18},{"ruleId":"227","severity":1,"message":"244","line":3,"column":8,"nodeType":"229","messageId":"230","endLine":3,"endColumn":20},{"ruleId":"227","severity":1,"message":"247","line":40,"column":14,"nodeType":"229","messageId":"230","endLine":40,"endColumn":27},{"ruleId":"227","severity":1,"message":"248","line":45,"column":14,"nodeType":"229","messageId":"230","endLine":45,"endColumn":27},{"ruleId":"227","severity":1,"message":"249","line":51,"column":12,"nodeType":"229","messageId":"230","endLine":51,"endColumn":27},{"ruleId":"227","severity":1,"message":"250","line":51,"column":29,"nodeType":"229","messageId":"230","endLine":51,"endColumn":47},{"ruleId":"251","severity":1,"message":"252","line":85,"column":12,"nodeType":"253","endLine":85,"endColumn":26,"suggestions":"260"},{"ruleId":"251","severity":1,"message":"255","line":95,"column":12,"nodeType":"253","endLine":95,"endColumn":25,"suggestions":"261"},{"ruleId":"251","severity":1,"message":"255","line":221,"column":12,"nodeType":"253","endLine":221,"endColumn":64,"suggestions":"262"},{"ruleId":"227","severity":1,"message":"263","line":39,"column":9,"nodeType":"229","messageId":"230","endLine":39,"endColumn":17},{"ruleId":"251","severity":1,"message":"264","line":128,"column":12,"nodeType":"253","endLine":128,"endColumn":24,"suggestions":"265"},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'useNavigate' is defined but never used.","'welcome' is defined but never used.","'buttonStyles' is assigned a value but never used.","'title' is defined but never used.","'tv' is defined but never used.","'PauseButton' is defined but never used.","'PlayButton' is defined but never used.","'useEffect' is defined but never used.","'Fragment' is defined but never used.",["266"],["267"],"'useState' is defined but never used.","'SongCard' is defined but never used.","'ResumeButton' is defined but never used.","'songArrayNum' is assigned a value but never used.","'setSongArrayNumber' is assigned a value but never used.","'randomToggler' is defined but never used.","'repeatToggler' is defined but never used.","'currentSongInfo' is assigned a value but never used.","'setCurrentSongInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.songList' and 'songMaker'. Either include them or remove the dependency array.","ArrayExpression",["268"],"React Hook useEffect has a missing dependency: 'playSong'. Either include it or remove the dependency array.",["269"],["270"],["266"],["267"],["271"],["272"],["273"],"'songList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'playlistInfo'. Either include them or remove the dependency array. You can also do a functional update 'setPlaylistInfo(p => ...)' if you only need 'playlistInfo' in the 'setPlaylistInfo' call.",["274"],"no-global-assign","no-unsafe-negation",{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"275","fix":"281"},{"desc":"277","fix":"282"},{"desc":"279","fix":"283"},{"desc":"284","fix":"285"},"Update the dependencies array to be: [props.songList, songArrayNum, songMaker]",{"range":"286","text":"287"},"Update the dependencies array to be: [currentSong, playSong]",{"range":"288","text":"289"},"Update the dependencies array to be: [currentSong, repeatOn, musicPlayTime, songDuration, playSong]",{"range":"290","text":"291"},{"range":"292","text":"287"},{"range":"293","text":"289"},{"range":"294","text":"291"},"Update the dependencies array to be: [accessToken, playlistID, playlistInfo]",{"range":"295","text":"296"},[1970,1984],"[props.songList, songArrayNum, songMaker]",[2268,2281],"[currentSong, playSong]",[5851,5903],"[currentSong, repeatOn, musicPlayTime, songDuration, playSong]",[2134,2148],[2432,2445],[6015,6067],[4726,4738],"[accessToken, playlistID, playlistInfo]"]