{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux'; // import { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { saveSpotify } from \"../store/SpotifyState\";\nimport axios from 'axios';\n\nfunction useAuth(code) {\n  _s();\n\n  var accesstoken = useSelector(state => state.spotify.accesstoken); // var refreshtoken = useSelector((state) => state.spotify.refreshtoken)\n  // var expiresin = useSelector((state) => state.spotify.expiresin)\n  // var isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\n\n  const dispatch = useDispatch(); // run an axios call to the server localhost on app.post, runs the log in func from the dispatch saveSpotify function which creates the access token\n  // the code object is taken from a trimmed param after successful redirect\n\n  axios.post('https://localhost:3000', {\n    code\n  }).then(res => {\n    console.log(\"res from spotify\");\n    console.log(res.data.accesstoken);\n    dispatch(saveSpotify(res)); // setAccess(res.data.accessToken)\n    // setRefresh(res.data.refreshToken)\n    // setExpire(res.data.expiresIn)\n    // console.log(res.data.accessToken)\n    // console.log(res.data.refreshToken)\n    // console.log(res.data.expiresIn)\n    // console.log(\"access token after\")\n    // console.log(expiresin)\n    // dispatch(spotifyActions.updateSpotifyCode(code))\n    // dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken))\n    // dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\n    // dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn))\n    //removes data from url and sets it back to root\n    // window.history.pushState({}, null, \"/\")\n    // let codePocket = \"http://localhost:3000/menu\"\n    // window.location.href = codePocket\n    // console.log(useAccess)\n    // console.log(useRefresh)\n    // console.log(useExpire)\n  }).catch(err => {\n    console.log(\"auth util error\");\n    console.log(err);\n  });\n  return accesstoken;\n}\n\n_s(useAuth, \"S2v7Oz5yQI54DSjm5f+nf7Ql5JI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/util/spotifyAuth.js"],"names":["useSelector","useDispatch","saveSpotify","axios","useAuth","code","accesstoken","state","spotify","dispatch","post","then","res","console","log","data","catch","err"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B,C,CACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAAA;;AAEnB,MAAIC,WAAW,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcF,WAA1B,CAA7B,CAFmB,CAGnB;AACA;AACA;;AAEA,QAAMG,QAAQ,GAAGR,WAAW,EAA5B,CAPmB,CASnB;AAGA;;AACAE,EAAAA,KAAK,CACAO,IADL,CACU,wBADV,EACoC;AAAEL,IAAAA;AAAF,GADpC,EAC8CM,IAD9C,CACmDC,GAAG,IAAI;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAAST,WAArB;AAEAG,IAAAA,QAAQ,CAACP,WAAW,CAACU,GAAD,CAAZ,CAAR,CAJkD,CAOlD;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACH,GAxCL,EAyCKI,KAzCL,CAyCYC,GAAD,IAAS;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,GA5CL;AA8CA,SAAOX,WAAP;AACH;;GA5DQF,O;UAEaJ,W,EAKDC,W;;;AAuDrB,eAAeG,OAAf","sourcesContent":["import { useSelector } from 'react-redux';\r\n// import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveSpotify } from \"../store/SpotifyState\"\r\nimport axios from 'axios';\r\n\r\n\r\nfunction useAuth(code) {\r\n\r\n    var accesstoken = useSelector((state) => state.spotify.accesstoken)\r\n    // var refreshtoken = useSelector((state) => state.spotify.refreshtoken)\r\n    // var expiresin = useSelector((state) => state.spotify.expiresin)\r\n    // var isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // run an axios call to the server localhost on app.post, runs the log in func from the dispatch saveSpotify function which creates the access token\r\n\r\n\r\n    // the code object is taken from a trimmed param after successful redirect\r\n    axios\r\n        .post('https://localhost:3000', { code }).then(res => {\r\n            console.log(\"res from spotify\")\r\n            console.log(res.data.accesstoken)\r\n\r\n            dispatch(saveSpotify(res))\r\n\r\n\r\n            // setAccess(res.data.accessToken)\r\n            // setRefresh(res.data.refreshToken)\r\n            // setExpire(res.data.expiresIn)\r\n\r\n\r\n            // console.log(res.data.accessToken)\r\n            // console.log(res.data.refreshToken)\r\n            // console.log(res.data.expiresIn)\r\n\r\n            // console.log(\"access token after\")\r\n\r\n            // console.log(expiresin)\r\n            // dispatch(spotifyActions.updateSpotifyCode(code))\r\n\r\n            // dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken))\r\n\r\n            // dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\r\n\r\n            // dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn))\r\n\r\n\r\n            //removes data from url and sets it back to root\r\n\r\n\r\n            // window.history.pushState({}, null, \"/\")\r\n\r\n\r\n            // let codePocket = \"http://localhost:3000/menu\"\r\n            // window.location.href = codePocket\r\n            // console.log(useAccess)\r\n            // console.log(useRefresh)\r\n            // console.log(useExpire)\r\n        })\r\n        .catch((err) => {\r\n            console.log(\"auth util error\")\r\n            console.log(err)\r\n        })\r\n\r\n    return accesstoken\r\n}\r\n\r\nexport default useAuth"]},"metadata":{},"sourceType":"module"}