{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\SoundBar.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styles from \"./SoundBarStyles.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction Soundbar() {\n  _s();\n\n  let token = localStorage.getItem(\"spotifyToken\");\n  const [songAudioLevel, setAudioLevel] = useState(70);\n\n  function volumeControl(e) {\n    console.log(`setting audio level ${e.target.value}`);\n    setAudioLevel(e.target.value);\n  }\n\n  useEffect(() => {\n    try {\n      axios.post('/spotify-control-audio', {\n        userData: {\n          accessToken: `${token}`,\n          level: songAudioLevel\n        }\n      }).then(res => {\n        console.log(`volume set ${songAudioLevel}`);\n        console.log(res);\n      }).catch(err => {\n        console.log(err);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [songAudioLevel, token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.audio_button,\n        onClick: () => {\n          setAudioLevel(songAudioLevel - songAudioLevel);\n        },\n        children: \"mute\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), songAudioLevel > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.audio_button,\n        onClick: () => {\n          setAudioLevel(songAudioLevel - 10);\n        },\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 42\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.audio_button,\n        onClick: () => {\n          setAudioLevel(songAudioLevel - 10);\n        },\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 153\n      }, this), songAudioLevel < 100 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.audio_button,\n        onClick: () => {\n          setAudioLevel(songAudioLevel + 10);\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 44\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.audio_button,\n        onClick: () => {\n          setAudioLevel(songAudioLevel + 10);\n        },\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 154\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"musicAudio\",\n        children: [\"Volume \", songAudioLevel]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        className: \"form-range\",\n        onChange: volumeControl,\n        id: \"musicAudio\",\n        value: songAudioLevel,\n        min: \"0\",\n        max: \"100\",\n        step: \"10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Soundbar, \"xWYhmQPFPfnNDZgOEWTGN75wm3w=\");\n\n_c = Soundbar;\nexport default Soundbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Soundbar\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/SoundBar.js"],"names":["useEffect","useState","styles","axios","require","Soundbar","token","localStorage","getItem","songAudioLevel","setAudioLevel","volumeControl","e","console","log","target","value","post","userData","accessToken","level","then","res","catch","err","error","audio_button"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\n\r\nimport styles from \"./SoundBarStyles.module.css\"\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction Soundbar() {\r\n    let token = localStorage.getItem(\"spotifyToken\")\r\n\r\n\r\n    const [songAudioLevel, setAudioLevel] = useState(70)\r\n\r\n    function volumeControl(e) {\r\n        console.log(`setting audio level ${e.target.value}`)\r\n        setAudioLevel(e.target.value)\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n            try {\r\n                axios.post('/spotify-control-audio', {\r\n                    userData: {\r\n                        accessToken: `${token}`,\r\n                        level: songAudioLevel\r\n                    }\r\n                }).then(\r\n                    (res) => {\r\n                        console.log(`volume set ${songAudioLevel}`)\r\n                        console.log(res)\r\n                    }\r\n                ).catch(\r\n                    (err) => {\r\n                        console.log(err)\r\n                    }\r\n                )\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }, [songAudioLevel, token]\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <div >\r\n                <button className={styles.audio_button} onClick={() => { setAudioLevel(songAudioLevel - songAudioLevel) }}>mute</button>\r\n\r\n                {(songAudioLevel > 0) ? (<button className={styles.audio_button} onClick={() => { setAudioLevel(songAudioLevel - 10) }}>-</button >) : (<button className={styles.audio_button} onClick={() => { setAudioLevel(songAudioLevel - 10) }}>-</button >)}\r\n\r\n                {(songAudioLevel < 100) ? (<button className={styles.audio_button} onClick={() => { setAudioLevel(songAudioLevel + 10) }}>+</button>) : (<button className={styles.audio_button} onClick={() => { setAudioLevel(songAudioLevel + 10) }}>+</button>)}\r\n            </div >\r\n            <div >\r\n                <label for=\"musicAudio\" >Volume {songAudioLevel}</label>\r\n                <input\r\n                    type=\"range\"\r\n                    className=\"form-range\"\r\n                    onChange={volumeControl}\r\n                    id=\"musicAudio\"\r\n                    value={songAudioLevel}\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    step=\"10\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Soundbar"]},"metadata":{},"sourceType":"module"}