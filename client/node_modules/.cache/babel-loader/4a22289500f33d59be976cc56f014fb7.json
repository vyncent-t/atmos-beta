{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\"\nrequire('dotenv').config({\n  path: `${__dirname}/../../../../.env`\n});\n\nlet spotifyClient = process.env.spotify_clientid;\nlet spotifySecret = process.env.spotify_secret;\nconsole.log(`READING FROM STATE ${spotifyClient}`);\nconsole.log(`READING FROM STATE ${spotifySecret}`);\nconst initialSpotifyState = {\n  spotifyAuthLink: 'https://accounts.spotify.com/authorize?client_id=50885eb87ce14757bdde10e7fb01f91a&response_type=code&redirect_uri=http://localhost:3000/&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state',\n  isSpotifyAuth: false,\n  clientid: \"50885eb87ce14757bdde10e7fb01f91a\",\n  clientsecret: \"4acdaecbdc96463bbe8daee8d938550c\",\n  authcode: \"none code\",\n  accesstoken: \"none token\",\n  refreshtoken: \"none refresh\",\n  expiresin: \"none ex\",\n  Xclient: `${spotifyClient}`,\n  Xsecret: `${spotifySecret}`\n};\nconst spotifySlice = createSlice({\n  name: \"spotifyMusic\",\n  initialState: initialSpotifyState,\n  reducers: {\n    updateSpotifyAuth(state) {\n      state.isSpotifyAuth = !state.isSpotifyAuth;\n    },\n\n    updateSpotifyCode(state, action) {\n      state.authcode = action.payload;\n    },\n\n    updateSpotifyAccess(state, action) {\n      state.accesstoken = action.payload;\n    },\n\n    updateSpotifyRefresh(state, action) {\n      state.refreshtoken = action.payload;\n    },\n\n    updateSpotifyExpire(state, action) {\n      state.expiresin = action.payload;\n    }\n\n  }\n});\nexport const saveSpotify = res => {\n  return async dispatch => {\n    await dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken));\n    await dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken));\n    await dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn));\n  };\n};\nexport const spotifyActions = spotifySlice.actions;\nexport default spotifySlice.reducer;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/store/SpotifyState.js"],"names":["require","config","path","__dirname","spotifyClient","process","env","spotify_clientid","spotifySecret","spotify_secret","console","log","initialSpotifyState","spotifyAuthLink","isSpotifyAuth","clientid","clientsecret","authcode","accesstoken","refreshtoken","expiresin","Xclient","Xsecret","spotifySlice","createSlice","name","initialState","reducers","updateSpotifyAuth","state","updateSpotifyCode","action","payload","updateSpotifyAccess","updateSpotifyRefresh","updateSpotifyExpire","saveSpotify","res","dispatch","spotifyActions","data","accessToken","refreshToken","expiresIn","actions","reducer"],"mappings":"AAAA;AAEAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAAEC,EAAAA,IAAI,EAAG,GAAEC,SAAU;AAArB,CAAzB;;AAIA,IAAIC,aAAa,GAAGC,OAAO,CAACC,GAAR,CAAYC,gBAAhC;AACA,IAAIC,aAAa,GAAGH,OAAO,CAACC,GAAR,CAAYG,cAAhC;AACAC,OAAO,CAACC,GAAR,CAAa,sBAAqBP,aAAc,EAAhD;AACAM,OAAO,CAACC,GAAR,CAAa,sBAAqBH,aAAc,EAAhD;AAEA,MAAMI,mBAAmB,GAAG;AACxBC,EAAAA,eAAe,EAAE,kSADO;AAExBC,EAAAA,aAAa,EAAE,KAFS;AAGxBC,EAAAA,QAAQ,EAAE,kCAHc;AAIxBC,EAAAA,YAAY,EAAE,kCAJU;AAKxBC,EAAAA,QAAQ,EAAE,WALc;AAMxBC,EAAAA,WAAW,EAAE,YANW;AAOxBC,EAAAA,YAAY,EAAE,cAPU;AAQxBC,EAAAA,SAAS,EAAE,SARa;AASxBC,EAAAA,OAAO,EAAG,GAAEjB,aAAc,EATF;AAUxBkB,EAAAA,OAAO,EAAG,GAAEd,aAAc;AAVF,CAA5B;AAgBA,MAAMe,YAAY,GAAGC,WAAW,CAAC;AAC7BC,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAEd,mBAFe;AAG7Be,EAAAA,QAAQ,EAAE;AACNC,IAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACf,aAAN,GAAsB,CAACe,KAAK,CAACf,aAA7B;AACH,KAHK;;AAINgB,IAAAA,iBAAiB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACZ,QAAN,GAAiBc,MAAM,CAACC,OAAxB;AACH,KANK;;AAONC,IAAAA,mBAAmB,CAACJ,KAAD,EAAQE,MAAR,EAAgB;AAC/BF,MAAAA,KAAK,CAACX,WAAN,GAAoBa,MAAM,CAACC,OAA3B;AACH,KATK;;AAUNE,IAAAA,oBAAoB,CAACL,KAAD,EAAQE,MAAR,EAAgB;AAChCF,MAAAA,KAAK,CAACV,YAAN,GAAqBY,MAAM,CAACC,OAA5B;AACH,KAZK;;AAaNG,IAAAA,mBAAmB,CAACN,KAAD,EAAQE,MAAR,EAAgB;AAC/BF,MAAAA,KAAK,CAACT,SAAN,GAAkBW,MAAM,CAACC,OAAzB;AACH;;AAfK;AAHmB,CAAD,CAAhC;AAuBA,OAAO,MAAMI,WAAW,GAAIC,GAAD,IAAS;AAChC,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMA,QAAQ,CACVC,cAAc,CAACN,mBAAf,CAAmCI,GAAG,CAACG,IAAJ,CAASC,WAA5C,CADU,CAAd;AAEA,UAAMH,QAAQ,CACVC,cAAc,CAACL,oBAAf,CAAoCG,GAAG,CAACG,IAAJ,CAASE,YAA7C,CADU,CAAd;AAEA,UAAMJ,QAAQ,CACVC,cAAc,CAACJ,mBAAf,CAAmCE,GAAG,CAACG,IAAJ,CAASG,SAA5C,CADU,CAAd;AAEH,GAPD;AAQH,CATM;AAYP,OAAO,MAAMJ,cAAc,GAAGhB,YAAY,CAACqB,OAApC;AAEP,eAAerB,YAAY,CAACsB,OAA5B","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nrequire('dotenv').config({ path: `${__dirname}/../../../../.env` })\r\n\r\n\r\n\r\nlet spotifyClient = process.env.spotify_clientid\r\nlet spotifySecret = process.env.spotify_secret\r\nconsole.log(`READING FROM STATE ${spotifyClient}`)\r\nconsole.log(`READING FROM STATE ${spotifySecret}`)\r\n\r\nconst initialSpotifyState = {\r\n    spotifyAuthLink: 'https://accounts.spotify.com/authorize?client_id=50885eb87ce14757bdde10e7fb01f91a&response_type=code&redirect_uri=http://localhost:3000/&scope=streaming%20user-read-email%20user-read-private%20user-library-read%20user-library-modify%20user-read-playback-state%20user-modify-playback-state',\r\n    isSpotifyAuth: false,\r\n    clientid: \"50885eb87ce14757bdde10e7fb01f91a\",\r\n    clientsecret: \"4acdaecbdc96463bbe8daee8d938550c\",\r\n    authcode: \"none code\",\r\n    accesstoken: \"none token\",\r\n    refreshtoken: \"none refresh\",\r\n    expiresin: \"none ex\",\r\n    Xclient: `${spotifyClient}`,\r\n    Xsecret: `${spotifySecret}`\r\n}\r\n\r\n\r\n\r\n\r\nconst spotifySlice = createSlice({\r\n    name: \"spotifyMusic\",\r\n    initialState: initialSpotifyState,\r\n    reducers: {\r\n        updateSpotifyAuth(state) {\r\n            state.isSpotifyAuth = !state.isSpotifyAuth\r\n        },\r\n        updateSpotifyCode(state, action) {\r\n            state.authcode = action.payload\r\n        },\r\n        updateSpotifyAccess(state, action) {\r\n            state.accesstoken = action.payload\r\n        },\r\n        updateSpotifyRefresh(state, action) {\r\n            state.refreshtoken = action.payload\r\n        },\r\n        updateSpotifyExpire(state, action) {\r\n            state.expiresin = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const saveSpotify = (res) => {\r\n    return async (dispatch) => {\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyAccess(res.data.accessToken))\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyExpire(res.data.expiresIn))\r\n    }\r\n}\r\n\r\n\r\nexport const spotifyActions = spotifySlice.actions\r\n\r\nexport default spotifySlice.reducer"]},"metadata":{},"sourceType":"module"}