{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { saveSpotify } from '../store/SpotifyState';\nimport axios from 'axios';\n\nfunction useAuth(code) {\n  _s();\n\n  // const [useAccess, setAccess] = useState()\n  // const [useRefresh, setRefresh] = useState()\n  // const [useExpire, setExpire] = useState()\n  // var code = useSelector((state) => state.spotify.code)\n  var accesstoken = useSelector(state => state.spotify.accesstoken); // var refreshtoken = useSelector((state) => state.spotify.refreshtoken)\n  // var expiresin = useSelector((state) => state.spotify.expiresin)\n  // var isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    axios.post('https://atmos-project.herokuapp.com/login', {\n      code\n    }).then(res => {\n      console.log(res.data);\n      dispatch(saveSpotify(res)); // setAccess(res.data.accessToken)\n      // setRefresh(res.data.refreshToken)\n      // setExpire(res.data.expiresIn)\n      // console.log(res.data.accessToken)\n      // console.log(res.data.refreshToken)\n      // console.log(res.data.expiresIn)\n      // console.log(\"access token after\")\n      // console.log(expiresin)\n      // dispatch(spotifyActions.updateSpotifyCode(code))\n      // dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken))\n      // dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\n      // dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn))\n      //removes data from url and sets it back to root\n      // window.history.pushState({}, null, \"/\")\n      // let codePocket = \"http://localhost:3000/menu\"\n      // window.location.href = codePocket\n      // console.log(useAccess)\n      // console.log(useRefresh)\n      // console.log(useExpire)\n    }).catch(err => {\n      console.log(\"auth util error\");\n      console.log(err);\n    });\n  }, [code, dispatch]);\n  return accesstoken;\n}\n\n_s(useAuth, \"S9xs3hY5qD0BWfSsZi5x6sT2GFw=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/server/spotifyAuth.js"],"names":["useSelector","useEffect","useDispatch","saveSpotify","axios","useAuth","code","accesstoken","state","spotify","dispatch","post","then","res","console","log","data","catch","err"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AAAA;;AACnB;AACA;AACA;AAEA;AACA,MAAIC,WAAW,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcF,WAA1B,CAA7B,CANmB,CAOnB;AACA;AACA;;AAEA,QAAMG,QAAQ,GAAGR,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZG,IAAAA,KAAK,CACAO,IADL,CACU,2CADV,EACuD;AAC/CL,MAAAA;AAD+C,KADvD,EAGOM,IAHP,CAGYC,GAAG,IAAI;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AAEAN,MAAAA,QAAQ,CAACP,WAAW,CAACU,GAAD,CAAZ,CAAR,CAHW,CAIX;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACH,KAvCL,EAwCKI,KAxCL,CAwCYC,GAAD,IAAS;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH,KA3CL;AA4CH,GA9CQ,EA8CN,CAACZ,IAAD,EAAOI,QAAP,CA9CM,CAAT;AAkDA,SAAOH,WAAP;AAEH;;GAjEQF,O;UAMaL,W,EAKDE,W;;;AAwDrB,eAAeG,OAAf","sourcesContent":["import { useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { saveSpotify } from '../store/SpotifyState';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction useAuth(code) {\r\n    // const [useAccess, setAccess] = useState()\r\n    // const [useRefresh, setRefresh] = useState()\r\n    // const [useExpire, setExpire] = useState()\r\n\r\n    // var code = useSelector((state) => state.spotify.code)\r\n    var accesstoken = useSelector((state) => state.spotify.accesstoken)\r\n    // var refreshtoken = useSelector((state) => state.spotify.refreshtoken)\r\n    // var expiresin = useSelector((state) => state.spotify.expiresin)\r\n    // var isAuth = useSelector((state) => state.spotify.isSpotifyAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        axios\r\n            .post('https://atmos-project.herokuapp.com/login', {\r\n                code,\r\n            }).then(res => {\r\n                console.log(res.data)\r\n\r\n                dispatch(saveSpotify(res))\r\n                // setAccess(res.data.accessToken)\r\n                // setRefresh(res.data.refreshToken)\r\n                // setExpire(res.data.expiresIn)\r\n\r\n\r\n                // console.log(res.data.accessToken)\r\n                // console.log(res.data.refreshToken)\r\n                // console.log(res.data.expiresIn)\r\n\r\n                // console.log(\"access token after\")\r\n\r\n                // console.log(expiresin)\r\n                // dispatch(spotifyActions.updateSpotifyCode(code))\r\n\r\n                // dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken))\r\n\r\n                // dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\r\n\r\n                // dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn))\r\n\r\n\r\n                //removes data from url and sets it back to root\r\n\r\n\r\n                // window.history.pushState({}, null, \"/\")\r\n\r\n\r\n                // let codePocket = \"http://localhost:3000/menu\"\r\n                // window.location.href = codePocket\r\n                // console.log(useAccess)\r\n                // console.log(useRefresh)\r\n                // console.log(useExpire)\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"auth util error\")\r\n                console.log(err)\r\n            })\r\n    }, [code, dispatch])\r\n\r\n\r\n\r\n    return accesstoken\r\n\r\n}\r\n\r\nexport default useAuth"]},"metadata":{},"sourceType":"module"}