{"ast":null,"code":"\"use strict\";\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n/**\n * Expose `ResponseBase`.\n */\n\n\nmodule.exports = ResponseBase;\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key)) obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n  // content-type\n  var ct = header['content-type'] || '';\n  this.type = utils.type(ct); // params\n\n  var params = utils.params(ct);\n\n  for (var key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key)) this[key] = params[key];\n  }\n\n  this.links = {}; // links\n\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (_unused) {// ignore\n  }\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  var type = status / 100 | 0; // status / class\n\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type; // basics\n\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false; // sugar\n\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};","map":{"version":3,"mappings":"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","names":["utils","require","module","exports","ResponseBase","obj","mixin","key","prototype","Object","hasOwnProperty","call","get","field","header","toLowerCase","_setHeaderProperties","ct","type","params","links","link","parseLinks","_setStatusProperties","status","statusCode","statusType","info","ok","redirect","clientError","serverError","error","toError","created","accepted","noContent","badRequest","unauthorized","notAcceptable","forbidden","notFound","unprocessableEntity"],"sources":["../src/response-base.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (const key in ResponseBase.prototype) {\n    if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key))\n      obj[key] = ResponseBase.prototype[key];\n  }\n\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const params = utils.params(ct);\n  for (const key in params) {\n    if (Object.prototype.hasOwnProperty.call(params, key))\n      this[key] = params[key];\n  }\n\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = (status / 100) | 0;\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n"]},"metadata":{},"sourceType":"script"}