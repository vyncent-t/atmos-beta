{"ast":null,"code":"import * as React from 'react';\nimport Next from './icons/Next';\nimport Pause from './icons/Pause';\nimport Play from './icons/Play';\nimport Previous from './icons/Previous';\nimport { px, styled } from '../styles';\nvar Wrapper = styled('div')({}, function (_a) {\n  var style = _a.style;\n  return {\n    alignItems: 'center',\n    display: 'flex',\n    height: px(style.h),\n    justifyContent: 'center',\n    '@media (max-width: 767px)': {\n      padding: px(10)\n    },\n    '> div': {\n      minWidth: px(style.h),\n      textAlign: 'center'\n    },\n    button: {\n      color: style.c,\n      fontSize: px(16),\n      '&.rswp__toggle': {\n        fontSize: px(28)\n      }\n    }\n  };\n}, 'ControlsRSWP');\nexport default function Controls(props) {\n  var isExternalDevice = props.isExternalDevice,\n      isPlaying = props.isPlaying,\n      nextTracks = props.nextTracks,\n      onClickNext = props.onClickNext,\n      onClickPrevious = props.onClickPrevious,\n      onClickTogglePlay = props.onClickTogglePlay,\n      previousTracks = props.previousTracks,\n      _a = props.styles,\n      color = _a.color,\n      height = _a.height;\n  return React.createElement(Wrapper, {\n    style: {\n      c: color,\n      h: height\n    }\n  }, React.createElement(\"div\", null, (!!previousTracks.length || isExternalDevice) && React.createElement(\"button\", {\n    \"aria-label\": \"Previous Track\",\n    onClick: onClickPrevious,\n    type: \"button\"\n  }, React.createElement(Previous, null))), React.createElement(\"div\", null, React.createElement(\"button\", {\n    \"aria-label\": isPlaying ? 'Pause' : 'Play',\n    className: \"rswp__toggle\",\n    onClick: onClickTogglePlay,\n    type: \"button\"\n  }, isPlaying ? React.createElement(Pause, null) : React.createElement(Play, null))), React.createElement(\"div\", null, (!!nextTracks.length || isExternalDevice) && React.createElement(\"button\", {\n    \"aria-label\": \"Next Track\",\n    onClick: onClickNext,\n    type: \"button\"\n  }, React.createElement(Next, null))));\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,SAASC,EAAT,EAAaC,MAAb,QAA2B,WAA3B;AAeA,IAAMC,OAAO,GAAGD,MAAM,CAAC,KAAD,CAAN,CACd,EADc,EAEd,UAACE,EAAD,EAAuB;MAApBC,KAAK;AAAoB,SAAC;AAC3BC,cAAU,EAAE,QADe;AAE3BC,WAAO,EAAE,MAFkB;AAG3BC,UAAM,EAAEP,EAAE,CAACI,KAAK,CAACI,CAAP,CAHiB;AAI3BC,kBAAc,EAAE,QAJW;AAM3B,iCAA6B;AAC3BC,aAAO,EAAEV,EAAE,CAAC,EAAD;AADgB,KANF;AAU3B,aAAS;AACPW,cAAQ,EAAEX,EAAE,CAACI,KAAK,CAACI,CAAP,CADL;AAEPI,eAAS,EAAE;AAFJ,KAVkB;AAe3BC,UAAM,EAAE;AACNC,WAAK,EAAEV,KAAK,CAACW,CADP;AAENC,cAAQ,EAAEhB,EAAE,CAAC,EAAD,CAFN;AAIN,wBAAkB;AAChBgB,gBAAQ,EAAEhB,EAAE,CAAC,EAAD;AADI;AAJZ;AAfmB,GAAD;AAuB1B,CAzBY,EA0Bd,cA1Bc,CAAhB;AA6BA,eAAc,SAAUiB,QAAV,CAAmBC,KAAnB,EAA+B;AAEzC,sBAAgB,GAQdA,KAAK,iBARP;AAAA,MACAC,SAAS,GAOPD,KAAK,UARP;AAAA,MAEAE,UAAU,GAMRF,KAAK,WARP;AAAA,MAGAG,WAAW,GAKTH,KAAK,YARP;AAAA,MAIAI,eAAe,GAIbJ,KAAK,gBARP;AAAA,MAKAK,iBAAiB,GAGfL,KAAK,kBARP;AAAA,MAMAM,cAAc,GAEZN,KAAK,eARP;AAAA,MAOAf,KACEe,KAAK,OARP;AAAA,MAOUJ,KAAK,WAPf;AAAA,MAOiBP,MAAM,YAPvB;AAUF,SACEZ,oBAACO,OAAD,EAAQ;AAACE,SAAK,EAAE;AAAEW,OAAC,EAAED,KAAL;AAAYN,OAAC,EAAED;AAAf;AAAR,GAAR,EACEZ,iCACG,CAAC,CAAC,CAAC6B,cAAc,CAACC,MAAjB,IAA2BC,gBAA5B,KACC/B;AAAA,kBAAmB,gBAAnB;AAAoCgC,WAAO,EAAEL,eAA7C;AAA8DM,QAAI,EAAC;AAAnE,KACEjC,oBAACI,QAAD,EAAS,IAAT,CADF,CAFJ,CADF,EAQEJ,iCACEA;AAAA,kBACcwB,SAAS,GAAG,OAAH,GAAa,MADpC;AAEEU,aAAS,EAAC,cAFZ;AAGEF,WAAO,EAAEJ,iBAHX;AAIEK,QAAI,EAAC;AAJP,KAMGT,SAAS,GAAGxB,oBAACE,KAAD,EAAM,IAAN,CAAH,GAAeF,oBAACG,IAAD,EAAK,IAAL,CAN3B,CADF,CARF,EAkBEH,iCACG,CAAC,CAAC,CAACyB,UAAU,CAACK,MAAb,IAAuBC,gBAAxB,KACC/B;AAAA,kBAAmB,YAAnB;AAAgCgC,WAAO,EAAEN,WAAzC;AAAsDO,QAAI,EAAC;AAA3D,KACEjC,oBAACC,IAAD,EAAK,IAAL,CADF,CAFJ,CAlBF,CADF;AA4BD","names":["React","Next","Pause","Play","Previous","px","styled","Wrapper","_a","style","alignItems","display","height","h","justifyContent","padding","minWidth","textAlign","button","color","c","fontSize","Controls","props","isPlaying","nextTracks","onClickNext","onClickPrevious","onClickTogglePlay","previousTracks","length","isExternalDevice","onClick","type","className"],"sourceRoot":"","sources":["../../src/components/Controls.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}