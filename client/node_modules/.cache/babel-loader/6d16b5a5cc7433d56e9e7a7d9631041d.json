{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // using toolkit in order to shortcut some template code to make overall code smaller and easier to manage\n// setting the initail state object, this is the master state which will be an expanded object\n\nconst initialContentState = {\n  musicButtonChoice: \"none\",\n  showCreateModal: false\n}; // the create slice method creates sections in which we can manipulate the state within the reducer\n\nconst contentSlice = createSlice({\n  name: \"contentManage\",\n  initialState: initialContentState,\n  reducers: {\n    updateMusicContent(state, action) {\n      state.musicButtonChoice = action.payload;\n    },\n\n    showCreateModal(state) {\n      state.showCreateModal = !state.showCreateModal;\n    }\n\n  }\n}); // using contentSlice .actions will match the reducers to their own generated key pairs, no longer need to write out {type: example}\n// toolkit creates an \"action creator\"  which will create the actions object for us, using the methods we run in the reducers prop under contentSlice\n\nexport const contentActions = contentSlice.actions; // we will be exporting only the reducers to the configure store since it wont need the entire slice, just the reducers and actions\n\nexport default contentSlice.reducer;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/store/Content.js"],"names":["createSlice","initialContentState","musicButtonChoice","showCreateModal","contentSlice","name","initialState","reducers","updateMusicContent","state","action","payload","contentActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;AAEA;;AACA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,iBAAiB,EAAE,MADK;AAExBC,EAAAA,eAAe,EAAE;AAFO,CAA5B,C,CAKA;;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC7BK,EAAAA,IAAI,EAAE,eADuB;AAE7BC,EAAAA,YAAY,EAAEL,mBAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC9BD,MAAAA,KAAK,CAACP,iBAAN,GAA0BQ,MAAM,CAACC,OAAjC;AACH,KAHK;;AAKNR,IAAAA,eAAe,CAACM,KAAD,EAAQ;AACnBA,MAAAA,KAAK,CAACN,eAAN,GAAwB,CAACM,KAAK,CAACN,eAA/B;AACH;;AAPK;AAHmB,CAAD,CAAhC,C,CAcA;AACA;;AACA,OAAO,MAAMS,cAAc,GAAGR,YAAY,CAACS,OAApC,C,CAEP;;AAEA,eAAeT,YAAY,CAACU,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n// using toolkit in order to shortcut some template code to make overall code smaller and easier to manage\r\n\r\n// setting the initail state object, this is the master state which will be an expanded object\r\nconst initialContentState = {\r\n    musicButtonChoice: \"none\",\r\n    showCreateModal: false,\r\n}\r\n\r\n// the create slice method creates sections in which we can manipulate the state within the reducer\r\nconst contentSlice = createSlice({\r\n    name: \"contentManage\",\r\n    initialState: initialContentState,\r\n    reducers: {\r\n        updateMusicContent(state, action) {\r\n            state.musicButtonChoice = action.payload\r\n        },\r\n\r\n        showCreateModal(state) {\r\n            state.showCreateModal = !state.showCreateModal\r\n        }\r\n    }\r\n})\r\n\r\n// using contentSlice .actions will match the reducers to their own generated key pairs, no longer need to write out {type: example}\r\n// toolkit creates an \"action creator\"  which will create the actions object for us, using the methods we run in the reducers prop under contentSlice\r\nexport const contentActions = contentSlice.actions;\r\n\r\n// we will be exporting only the reducers to the configure store since it wont need the entire slice, just the reducers and actions\r\n\r\nexport default contentSlice.reducer;"]},"metadata":{},"sourceType":"module"}