{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.getYouTubeID = factory();\n  }\n})(this, function (exports) {\n  return function (url, opts) {\n    if (opts == undefined) {\n      opts = {\n        fuzzy: true\n      };\n    }\n\n    if (/youtu\\.?be/.test(url)) {\n      // Look first for known patterns\n      var i;\n      var patterns = [/youtu\\.be\\/([^#\\&\\?]{11})/, // youtu.be/<id>\n      /\\?v=([^#\\&\\?]{11})/, // ?v=<id>\n      /\\&v=([^#\\&\\?]{11})/, // &v=<id>\n      /embed\\/([^#\\&\\?]{11})/, // embed/<id>\n      /\\/v\\/([^#\\&\\?]{11})/ // /v/<id>\n      ]; // If any pattern matches, return the ID\n\n      for (i = 0; i < patterns.length; ++i) {\n        if (patterns[i].test(url)) {\n          return patterns[i].exec(url)[1];\n        }\n      }\n\n      if (opts.fuzzy) {\n        // If that fails, break it apart by certain characters and look \n        // for the 11 character key\n        var tokens = url.split(/[\\/\\&\\?=#\\.\\s]/g);\n\n        for (i = 0; i < tokens.length; ++i) {\n          if (/^[^#\\&\\?]{11}$/.test(tokens[i])) {\n            return tokens[i];\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n});","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/node_modules/get-youtube-id/index.js"],"names":["root","factory","exports","module","define","amd","getYouTubeID","url","opts","undefined","fuzzy","test","i","patterns","length","exec","tokens","split"],"mappings":"AACC,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACxB,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/BC,IAAAA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAAxB;AACD,GAFD,MAEO,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACrDD,IAAAA,MAAM,CAACH,OAAD,CAAN;AACD,GAFM,MAEA;AACLD,IAAAA,IAAI,CAACM,YAAL,GAAoBL,OAAO,EAA3B;AACD;AACF,CARA,EAQC,IARD,EAQO,UAAUC,OAAV,EAAmB;AAEzB,SAAO,UAAUK,GAAV,EAAeC,IAAf,EAAqB;AAC1B,QAAIA,IAAI,IAAIC,SAAZ,EAAuB;AACrBD,MAAAA,IAAI,GAAG;AAACE,QAAAA,KAAK,EAAE;AAAR,OAAP;AACD;;AAED,QAAI,aAAaC,IAAb,CAAkBJ,GAAlB,CAAJ,EAA4B;AAE1B;AACA,UAAIK,CAAJ;AACA,UAAIC,QAAQ,GAAG,CACb,2BADa,EACiB;AAC9B,0BAFa,EAEiB;AAC9B,0BAHa,EAGiB;AAC9B,6BAJa,EAIiB;AAC9B,2BALa,CAKiB;AALjB,OAAf,CAJ0B,CAY1B;;AACA,WAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,QAAQ,CAACC,MAAzB,EAAiC,EAAEF,CAAnC,EAAsC;AACpC,YAAIC,QAAQ,CAACD,CAAD,CAAR,CAAYD,IAAZ,CAAiBJ,GAAjB,CAAJ,EAA2B;AACzB,iBAAOM,QAAQ,CAACD,CAAD,CAAR,CAAYG,IAAZ,CAAiBR,GAAjB,EAAsB,CAAtB,CAAP;AACD;AACF;;AAED,UAAIC,IAAI,CAACE,KAAT,EAAgB;AACd;AACA;AACA,YAAIM,MAAM,GAAGT,GAAG,CAACU,KAAJ,CAAU,iBAAV,CAAb;;AACA,aAAKL,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,MAAM,CAACF,MAAvB,EAA+B,EAAEF,CAAjC,EAAoC;AAClC,cAAI,iBAAiBD,IAAjB,CAAsBK,MAAM,CAACJ,CAAD,CAA5B,CAAJ,EAAsC;AACpC,mBAAOI,MAAM,CAACJ,CAAD,CAAb;AACD;AACF;AACF;AACF;;AAED,WAAO,IAAP;AACD,GArCD;AAuCD,CAjDA,CAAD","sourcesContent":["\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.getYouTubeID = factory();\n  }\n}(this, function (exports) {\n\n  return function (url, opts) {\n    if (opts == undefined) {\n      opts = {fuzzy: true};\n    }\n\n    if (/youtu\\.?be/.test(url)) {\n\n      // Look first for known patterns\n      var i;\n      var patterns = [\n        /youtu\\.be\\/([^#\\&\\?]{11})/,  // youtu.be/<id>\n        /\\?v=([^#\\&\\?]{11})/,         // ?v=<id>\n        /\\&v=([^#\\&\\?]{11})/,         // &v=<id>\n        /embed\\/([^#\\&\\?]{11})/,      // embed/<id>\n        /\\/v\\/([^#\\&\\?]{11})/         // /v/<id>\n      ];\n\n      // If any pattern matches, return the ID\n      for (i = 0; i < patterns.length; ++i) {\n        if (patterns[i].test(url)) {\n          return patterns[i].exec(url)[1];\n        }\n      }\n\n      if (opts.fuzzy) {\n        // If that fails, break it apart by certain characters and look \n        // for the 11 character key\n        var tokens = url.split(/[\\/\\&\\?=#\\.\\s]/g);\n        for (i = 0; i < tokens.length; ++i) {\n          if (/^[^#\\&\\?]{11}$/.test(tokens[i])) {\n            return tokens[i];\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n}));\n"]},"metadata":{},"sourceType":"script"}