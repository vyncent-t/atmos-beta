{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\songSection.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport SongCard from \"./songCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SongSection(props) {\n  // const [songsLoading, setSongsLoading] = useState(true)\n  // replace props.whatever.we to correct data format\n  // replace this too\n  let musicList = props.playlistInfo.tracks;\n  console.log(\"printing array of tracks in song section\");\n  console.log(musicList);\n  let tracksArray = [];\n\n  if (musicList) {\n    musicList.forEach(el => tracksArray.push(el));\n    console.log(\"tracks array\");\n    console.log(tracksArray);\n  } // const songList = tracksArray.Map(\n  //     (song) => {\n  //         return (\n  //             <div>\n  //                 <SongCard />\n  //             </div>\n  //         )\n  //     }\n  // )\n  // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\n  // if (musicList.length > 5) {\n  //     setSongsLoading(true)\n  // } else {\n  //     setSongsLoading(false)\n  // }\n\n\n  console.log(\"tracks data from playlist\", musicList);\n  const content = \"songList\"; // const content = songsLoading ?\n  //     (<div>...is Loading</div>)\n  //     :\n  //     (<div> Loading Complete\n  //     </div>)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tracksArray.map((song, index) => /*#__PURE__*/_jsxDEV(SongCard, {\n      uri: song.track.uri,\n      name: song.track.name,\n      album: song.track.album // artist={song.track.artist}\n      // id={song.track.id}\n      // href={song.track.href}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_c = SongSection;\nexport default SongSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongSection\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/songSection.js"],"names":["React","Fragment","useEffect","useState","SongCard","SongSection","props","musicList","playlistInfo","tracks","console","log","tracksArray","forEach","el","push","content","map","song","index","track","uri","name","album"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAIxB;AAGA;AACA;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,YAAN,CAAmBC,MAAnC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AAEA,MAAIK,WAAW,GAAG,EAAlB;;AAEA,MAAIL,SAAJ,EAAe;AACXA,IAAAA,SAAS,CAACM,OAAV,CACIC,EAAE,IAAIF,WAAW,CAACG,IAAZ,CAAiBD,EAAjB,CADV;AAGAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACH,GAtBuB,CA0BxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCJ,SAAzC;AAGA,QAAMS,OAAO,GAAG,UAAhB,CA9CwB,CA+CxB;AACA;AACA;AACA;AACA;;AAIA,sBACI;AAAA,cAEQJ,WAAW,CAACK,GAAZ,CACI,CAACC,IAAD,EAAOC,KAAP,kBACI,QAAC,QAAD;AACI,MAAA,GAAG,EAAED,IAAI,CAACE,KAAL,CAAWC,GADpB;AAEI,MAAA,IAAI,EAAEH,IAAI,CAACE,KAAL,CAAWE,IAFrB;AAGI,MAAA,KAAK,EAAEJ,IAAI,CAACE,KAAL,CAAWG,KAHtB,CAIA;AACA;AACA;;AANA;AAAA;AAAA;AAAA;AAAA,YAFR;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;KAzEQlB,W;AA2ET,eAAeA,WAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\n\r\nimport SongCard from \"./songCard\"\r\n\r\n\r\n\r\nfunction SongSection(props) {\r\n\r\n\r\n\r\n    // const [songsLoading, setSongsLoading] = useState(true)\r\n\r\n\r\n    // replace props.whatever.we to correct data format\r\n    // replace this too\r\n    let musicList = props.playlistInfo.tracks\r\n\r\n    console.log(\"printing array of tracks in song section\")\r\n    console.log(musicList)\r\n\r\n    let tracksArray = []\r\n\r\n    if (musicList) {\r\n        musicList.forEach(\r\n            el => tracksArray.push(el)\r\n        )\r\n        console.log(\"tracks array\")\r\n        console.log(tracksArray)\r\n    }\r\n\r\n\r\n\r\n    // const songList = tracksArray.Map(\r\n    //     (song) => {\r\n    //         return (\r\n    //             <div>\r\n    //                 <SongCard />\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    // )\r\n\r\n\r\n    // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n    // if (musicList.length > 5) {\r\n    //     setSongsLoading(true)\r\n    // } else {\r\n    //     setSongsLoading(false)\r\n    // }\r\n    console.log(\"tracks data from playlist\", musicList)\r\n\r\n\r\n    const content = \"songList\"\r\n    // const content = songsLoading ?\r\n    //     (<div>...is Loading</div>)\r\n    //     :\r\n    //     (<div> Loading Complete\r\n    //     </div>)\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                tracksArray.map(\r\n                    (song, index) => (\r\n                        <SongCard\r\n                            uri={song.track.uri}\r\n                            name={song.track.name}\r\n                            album={song.track.album}\r\n                        // artist={song.track.artist}\r\n                        // id={song.track.id}\r\n                        // href={song.track.href}\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongSection"]},"metadata":{},"sourceType":"module"}