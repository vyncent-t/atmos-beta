{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\MusicControls.js\",\n    _s = $RefreshSig$();\n\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport ResumeButton from \"./ResumeButton\";\nimport { useEffect, useState } from \"react\";\nimport SongCard from \"./SongCard\";\nimport Soundbar from \"./SoundBar\";\nimport styles from './MusicControlStyles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction MusicControls(props) {\n  _s();\n\n  let token = localStorage.getItem(\"spotifyToken\"); // next and previous logic for songs\n\n  const [songArrayNum, setSongArrayNumber] = useState(0);\n  const [songDuration, setSongDuration] = useState(0);\n  const [musicPlaying, setMusicPlaying] = useState(null);\n  const [musicPlayTime, setMusicPlayTime] = useState(0);\n  const [autoPlayOn, setAutoPlayOn] = useState(true);\n  const [randomOn, setRandomOn] = useState(false);\n  const [repeatOn, setRepeatOn] = useState(false);\n\n  function nextSongHandler() {\n    let nextSong = parseInt(songArrayNum) + 1;\n    setSongArrayNumber(nextSong);\n  }\n\n  function prevSongHandler() {\n    let lastSong = parseInt(songArrayNum) - 1;\n    setSongArrayNumber(lastSong);\n  }\n\n  function randomToggler() {\n    setRandomOn(!randomOn);\n  }\n\n  function repeatToggler() {\n    setRepeatOn(!repeatOn);\n  }\n\n  const [currentSongInfo, setCurrentSongInfo] = useState(null);\n  const [currentSong, setCurrentSong] = useState();\n  console.log(\"print props for music controls\");\n  console.log(props);\n  let musicArrayList = props.songList;\n  console.log(\"controls array\");\n  console.log(musicArrayList);\n\n  function songMaker(song) {\n    console.log(\"song maker before setting song\");\n    console.log(song);\n    setCurrentSong(() => song);\n    console.log(\"currentsong after set\");\n    console.log(currentSong);\n  }\n\n  useEffect(() => {\n    if (!props.songList) return;\n    songMaker(props.songList[songArrayNum].track);\n  }, [songArrayNum]);\n  useEffect(() => {\n    if (!currentSong) return;\n    playSong(currentSong.uri);\n    setSongDuration(parseInt(currentSong.duration_ms)); // reset the playtime to 0 for new song\n\n    setMusicPlayTime(0);\n  }, [currentSong]);\n  console.log(\"data from current song in song conrols\");\n\n  function playSong(songCode) {\n    setMusicPlaying(true);\n    axios.post('/spotify-play-music', {\n      userData: {\n        accessToken: `${token}`,\n        musicURI: songCode\n      }\n    }).then(res => {\n      console.log(\"play worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function pauseSong() {\n    setMusicPlaying(false); // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\n\n    console.log(\"pausing music\");\n    axios.post('/spotify-pause', {\n      userData: {\n        accessToken: `${token}`\n      }\n    }).then(res => {\n      console.log(\"pause worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function resumeSong() {\n    setMusicPlaying(true);\n    console.log(\"resume music\");\n    axios.post('/spotify-resume', {\n      userData: {\n        accessToken: `${token}`\n      }\n    }).then(res => {\n      console.log(\"resume worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function autoPlayOnHandler(song) {\n    console.log(\"auto play now on\");\n    setAutoPlayOn(true);\n    playSong(song);\n  }\n\n  function autoPlayOffHandler(song) {\n    console.log(\"auto play now off\");\n    setAutoPlayOn(false); // playSong(song)\n  }\n\n  function songArrayHandle(event) {\n    console.log(`now printing for array placement ${event.target.value}`);\n    setSongArrayNumber(event.target.value);\n    console.log(songArrayNum);\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    if (musicPlaying) {\n      interval = setInterval(() => {\n        setMusicPlayTime(musicPlayTime + 5000);\n      }, 5000);\n\n      if (musicPlayTime >= songDuration && autoPlayOn) {\n        // reset the playtime to 0 for new song\n        setMusicPlayTime(0);\n        console.log(\"next song playing from auto play\");\n        let nextSong = parseInt(songArrayNum) + 1;\n        setSongArrayNumber(nextSong);\n      }\n\n      if (musicPlayTime > songDuration && !autoPlayOn) {\n        // set song to complete time\n        setMusicPlayTime(songDuration);\n      }\n    } else {\n      console.log(\"no music playing\");\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [musicPlayTime, musicPlaying, songDuration, autoPlayOn, songArrayNum]);\n  useEffect(() => {\n    if (repeatOn) {\n      if (musicPlayTime > songDuration) {\n        playSong(currentSong.uri);\n        setSongDuration(parseInt(currentSong.duration_ms)); // reset the playtime to 0 for new song\n\n        setMusicPlayTime(0);\n      }\n    }\n  }, [currentSong, repeatOn, musicPlayTime, songDuration]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentSong ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rounded m-3 p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"music controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.music_controls,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.track_controls,\n            children: [autoPlayOn ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: autoPlayOffHandler,\n                children: \"Disable Auto Play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => {\n                  autoPlayOnHandler(currentSong.uri);\n                },\n                children: \"Enable Auto Play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 45\n            }, this), songArrayNum > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-light m-1\",\n                onClick: prevSongHandler,\n                children: \"prev track\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 41\n            }, this), songArrayNum < 100 && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-light m-1\",\n                onClick: nextSongHandler,\n                children: \"next track\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.track_info,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Now listening to\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: currentSong.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [musicPlayTime, \" / \", songDuration]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 37\n            }, this), musicPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"m-1 btn btn-light\",\n                onClick: () => {\n                  pauseSong();\n                },\n                children: \"Pause\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 54\n            }, this), !musicPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"m-1 btn btn-light\",\n                onClick: () => {\n                  resumeSong();\n                },\n                children: \"Resume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 55\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Soundbar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }, this), musicArrayList && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: musicArrayList.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(SongCard, {\n            place: index,\n            arrayNum: songArrayNum,\n            uri: song.track.uri,\n            name: song.track.name // album={song.track.album.name}\n            ,\n            artist: song.track.artists[0].name,\n            id: song.track.id,\n            href: song.track.href\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              value: index,\n              onClick: songArrayHandle,\n              children: \"Play\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MusicControls, \"Siy8wrAuHomI588wPCGust93hus=\");\n\n_c = MusicControls;\nexport default MusicControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicControls\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/MusicControls.js"],"names":["PauseButton","PlayButton","ResumeButton","useEffect","useState","SongCard","Soundbar","styles","axios","require","MusicControls","props","token","localStorage","getItem","songArrayNum","setSongArrayNumber","songDuration","setSongDuration","musicPlaying","setMusicPlaying","musicPlayTime","setMusicPlayTime","autoPlayOn","setAutoPlayOn","randomOn","setRandomOn","repeatOn","setRepeatOn","nextSongHandler","nextSong","parseInt","prevSongHandler","lastSong","randomToggler","repeatToggler","currentSongInfo","setCurrentSongInfo","currentSong","setCurrentSong","console","log","musicArrayList","songList","songMaker","song","track","playSong","uri","duration_ms","songCode","post","userData","accessToken","musicURI","then","res","catch","err","pauseSong","resumeSong","autoPlayOnHandler","autoPlayOffHandler","songArrayHandle","event","target","value","interval","setInterval","clearInterval","music_controls","track_controls","track_info","name","map","index","artists","id","href"],"mappings":"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","sourcesContent":["import PauseButton from \"./PauseButton\"\r\nimport PlayButton from \"./PlayButton\"\r\nimport ResumeButton from \"./ResumeButton\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport SongCard from \"./SongCard\"\r\nimport Soundbar from \"./SoundBar\"\r\nimport styles from './MusicControlStyles.module.css'\r\n\r\n\r\n\r\nconst axios = require('axios')\r\n\r\nfunction MusicControls(props) {\r\n\r\n    let token = localStorage.getItem(\"spotifyToken\")\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n    const [songDuration, setSongDuration] = useState(0)\r\n    const [musicPlaying, setMusicPlaying] = useState(null)\r\n    const [musicPlayTime, setMusicPlayTime] = useState(0)\r\n    const [autoPlayOn, setAutoPlayOn] = useState(true)\r\n    const [randomOn, setRandomOn] = useState(false)\r\n    const [repeatOn, setRepeatOn] = useState(false)\r\n\r\n    function nextSongHandler() {\r\n        let nextSong = parseInt(songArrayNum) + 1\r\n        setSongArrayNumber(nextSong)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        let lastSong = parseInt(songArrayNum) - 1\r\n\r\n        setSongArrayNumber(lastSong)\r\n    }\r\n\r\n\r\n    function randomToggler() {\r\n        setRandomOn(!randomOn)\r\n    }\r\n\r\n\r\n    function repeatToggler() {\r\n        setRepeatOn(!repeatOn)\r\n    }\r\n\r\n\r\n\r\n    const [currentSongInfo, setCurrentSongInfo] = useState(null)\r\n\r\n\r\n    const [currentSong, setCurrentSong] = useState()\r\n\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n\r\n    let musicArrayList = props.songList\r\n\r\n\r\n    console.log(\"controls array\")\r\n    console.log(musicArrayList)\r\n\r\n\r\n\r\n    function songMaker(song) {\r\n        console.log(\"song maker before setting song\")\r\n        console.log(song)\r\n        setCurrentSong(\r\n            () => song\r\n        )\r\n        console.log(\"currentsong after set\")\r\n        console.log(currentSong)\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!props.songList) return\r\n            songMaker(props.songList[songArrayNum].track)\r\n        }, [songArrayNum]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!currentSong) return\r\n            playSong(currentSong.uri)\r\n            setSongDuration((parseInt(currentSong.duration_ms)))\r\n            // reset the playtime to 0 for new song\r\n            setMusicPlayTime(0)\r\n        }, [currentSong]\r\n    )\r\n\r\n\r\n    console.log(\"data from current song in song conrols\")\r\n\r\n\r\n    function playSong(songCode) {\r\n        setMusicPlaying(true)\r\n        axios.post('/spotify-play-music', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n                musicURI: songCode\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"play worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function pauseSong() {\r\n        setMusicPlaying(false)\r\n        // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\r\n        console.log(\"pausing music\")\r\n        axios.post('/spotify-pause', {\r\n            userData: {\r\n                accessToken: `${token}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"pause worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function resumeSong() {\r\n        setMusicPlaying(true)\r\n        console.log(\"resume music\")\r\n        axios.post('/spotify-resume', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"resume worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    function autoPlayOnHandler(song) {\r\n        console.log(\"auto play now on\")\r\n        setAutoPlayOn(true)\r\n        playSong(song)\r\n    }\r\n\r\n    function autoPlayOffHandler(song) {\r\n        console.log(\"auto play now off\")\r\n        setAutoPlayOn(false)\r\n        // playSong(song)\r\n    }\r\n\r\n    function songArrayHandle(event) {\r\n        console.log(`now printing for array placement ${event.target.value\r\n            }`)\r\n\r\n        setSongArrayNumber(event.target.value)\r\n        console.log(songArrayNum)\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            let interval = null\r\n            if (musicPlaying) {\r\n                interval = setInterval(() => {\r\n                    setMusicPlayTime(musicPlayTime + 5000)\r\n                }, 5000)\r\n\r\n                if ((musicPlayTime >= songDuration) && autoPlayOn) {\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n\r\n                    console.log(\"next song playing from auto play\")\r\n                    let nextSong = parseInt(songArrayNum) + 1\r\n                    setSongArrayNumber(nextSong)\r\n                }\r\n\r\n                if ((musicPlayTime > songDuration) && !autoPlayOn) {\r\n                    // set song to complete time\r\n                    setMusicPlayTime(songDuration)\r\n                }\r\n            } else {\r\n                console.log(\"no music playing\")\r\n            }\r\n            return () => { clearInterval(interval) }\r\n        }, [musicPlayTime, musicPlaying, songDuration, autoPlayOn, songArrayNum]\r\n    )\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (repeatOn) {\r\n                if (musicPlayTime > songDuration) {\r\n                    playSong(currentSong.uri)\r\n                    setSongDuration((parseInt(currentSong.duration_ms)))\r\n                    // reset the playtime to 0 for new song\r\n                    setMusicPlayTime(0)\r\n                }\r\n            }\r\n        }, [currentSong, repeatOn, musicPlayTime, songDuration]\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentSong ?\r\n                (\r\n                    <div className=\"rounded m-3 p-3\">\r\n                        <div>\r\n                            <h1>music controls</h1>\r\n                            <div className={styles.music_controls}>\r\n                                <div className={styles.track_controls}>\r\n                                    {\r\n                                        autoPlayOn ? (\r\n                                            <div>\r\n                                                <button className=\"btn btn-success\" onClick={\r\n                                                    autoPlayOffHandler} >Disable Auto Play</button>\r\n                                            </div>\r\n                                        ) : <div>\r\n                                            <button className=\"btn btn-success\" onClick={\r\n                                                () => { autoPlayOnHandler(currentSong.uri) }\r\n                                            }>Enable Auto Play</button>\r\n                                        </div>\r\n                                    }\r\n                                    {songArrayNum > 0 &&\r\n                                        <div>\r\n                                            <button className=\"btn btn-light m-1\" onClick={prevSongHandler}>prev track</button>\r\n                                        </div>\r\n                                    }\r\n\r\n                                    {\r\n                                        songArrayNum < 100 &&\r\n                                        <div>\r\n                                            <button className=\"btn btn-light m-1\" onClick={nextSongHandler}>next track</button>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                <div className={styles.track_info}>\r\n                                    {/* <div>\r\n                                        now listening to {currentSong.name} {currentSong.uri}\r\n                                    </div> */}\r\n                                    <div>\r\n                                        <div>Now listening to</div>\r\n                                        <div>{currentSong.name}</div>\r\n                                    </div>\r\n                                    <div >\r\n                                        <div>\r\n                                            {musicPlayTime} / {songDuration}\r\n                                        </div>\r\n                                        {/* <div>\r\n                                            current place in array {songArrayNum}\r\n                                        </div> */}\r\n                                        {/* <div>\r\n                                            current song duration {songDuration}\r\n                                        </div> */}\r\n                                        {/* <div>\r\n                                            current song play time {musicPlayTime}\r\n                                        </div> */}\r\n                                    </div>\r\n\r\n                                    {musicPlaying && <div>\r\n                                        <button className=\"m-1 btn btn-light\" onClick={() => { pauseSong() }}>Pause</button>\r\n                                    </div>}\r\n\r\n                                    {!musicPlaying && <div>\r\n                                        <button className=\"m-1 btn btn-light\" onClick={() => { resumeSong() }}>Resume</button>\r\n                                    </div>}\r\n\r\n                                    <div>\r\n                                        <Soundbar />\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                        {musicArrayList &&\r\n                            <div>\r\n                                {musicArrayList.map(\r\n                                    (song, index) => (\r\n                                        <div>\r\n                                            <SongCard\r\n                                                place={index}\r\n                                                arrayNum={songArrayNum}\r\n                                                uri={song.track.uri}\r\n                                                name={song.track.name}\r\n                                                // album={song.track.album.name}\r\n                                                artist={song.track.artists[0].name}\r\n                                                id={song.track.id}\r\n                                                href={song.track.href}\r\n                                            />\r\n                                            <span>\r\n                                                <button className=\"btn btn-primary\" value={index} onClick={songArrayHandle}>Play</button>\r\n                                            </span>\r\n                                        </div>\r\n                                    )\r\n                                )}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                ) :\r\n                (<div>Loading...</div>)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls"]},"metadata":{},"sourceType":"module"}