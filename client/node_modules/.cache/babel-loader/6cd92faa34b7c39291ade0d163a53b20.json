{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\PlaylistSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport PauseButton from \"./pauseButton\";\nimport PlayButton from \"./playButton\";\nimport PlaylistCard from \"./playlistCard\";\nimport ResumeButton from \"./resumeButton\";\nimport SongSection from \"./songSection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction PlaylistSection(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true); // use state in order to select a playlist id from local storage\n\n  const [playlistArrayNum, setPlaylistArrayNumber] = useState(0);\n\n  function nextPlaylistHandler() {\n    setPlaylistArrayNumber(playlistArrayNum + 1);\n  }\n\n  function prevPlaylistHandler() {\n    setPlaylistArrayNumber(playlistArrayNum - 1);\n  }\n\n  if (playlistArrayNum < -1) {\n    nextPlaylistHandler();\n  }\n\n  if (playlistArrayNum > 10) {\n    prevPlaylistHandler();\n  }\n\n  const [playlistInfo, setPlaylistInfo] = useState({});\n  let songList = [];\n  var accessToken = localStorage.getItem(\"spotifyToken\");\n  var playlistID = localStorage.getItem(`musicplaylistcode${playlistArrayNum}`);\n  console.log(`current spotify playlist`, playlistID);\n  const [currentPlaylist, setCurrentPlaylist] = useState(playlistID);\n  console.log(\"CURRENT PLAYLIST\", currentPlaylist);\n\n  function updateSongList(array) {\n    songList = array;\n    console.log(\"song array\");\n    console.log(songList);\n    return songList;\n  }\n\n  function updatePlaylistInfo(_ref) {\n    let {\n      name,\n      uri,\n      description,\n      href,\n      id,\n      images,\n      external_urls\n    } = _ref;\n    setPlaylistInfo(() => {\n      playlistInfo.name = name;\n      playlistInfo.uri = uri;\n      playlistInfo.description = description;\n      playlistInfo.href = href;\n      playlistInfo.id = id;\n      playlistInfo.image = images[0].url;\n      playlistInfo.external_url = external_urls; // playlistInfo.tracks = tracks\n\n      console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo);\n      return playlistInfo;\n    }); // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\n\n    setIsLoading(true);\n    console.log(\"SET PLAYLIST IS NOW\", playlistInfo);\n    setIsLoading(false);\n  } // if the playlist is equal to none we set the attributes we want\n\n\n  useEffect(() => {\n    setCurrentPlaylist(playlistID);\n    console.log(\"playlist ID taken from local storage\", playlistID); // function updatePlaylistCode(ID){\n    //     setCurrentPlaylist(playlistID)\n    //     return playlistID\n    // }\n    // updatePlaylistInfo()\n    // axios calls whenever the playlistID changes\n\n    axios.post('/spotify-playlist', {\n      userData: {\n        playlistID: `${playlistID}`,\n        accessToken: `${accessToken}`\n      }\n    }).then(res => {\n      console.log(\"setting is loading to false\");\n      setIsLoading(false);\n      console.log(`music playlist res ID ${playlistID}`, res); // the following is printed on the browser console\n\n      console.log(`below is the whole res`); // response print from the spotify custom you need to expand in browser console\n\n      console.log(res);\n      console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\"); // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\n\n      console.log(`reading music playlist res: `, res.data); // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\n      // var playlistMusicItems = res.data\n      // var playlistCodes = playlistMusicItems.map(playlistCode => {\n      //     return playlistCode.id\n      // })\n      // updateMusicContent(playlistCodes)\n\n      updatePlaylistInfo(res.data);\n      updateSongList(res.data.tracks.items);\n    }).catch(error => {\n      console.log(\"setting is loading to false\");\n      setIsLoading(false);\n      console.log(error);\n    });\n  }, [playlistID]);\n  const content = isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"...is Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 10\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" Loading Complete\", /*#__PURE__*/_jsxDEV(SongSection, {\n      songs: songList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResumeButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 10\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [playlistArrayNum > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-light\",\n          onClick: prevPlaylistHandler,\n          children: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 46\n        }, this), playlistArrayNum < 10 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-light\",\n          onClick: nextPlaylistHandler,\n          children: \"next playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-title\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlaylistSection, \"XzoEPVVz35pqFsRgfatg/ODUhU8=\");\n\n_c = PlaylistSection;\nexport default PlaylistSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistSection\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/PlaylistSection.js"],"names":["React","Fragment","useEffect","useState","PauseButton","PlayButton","PlaylistCard","ResumeButton","SongSection","axios","require","PlaylistSection","props","isLoading","setIsLoading","playlistArrayNum","setPlaylistArrayNumber","nextPlaylistHandler","prevPlaylistHandler","playlistInfo","setPlaylistInfo","songList","accessToken","localStorage","getItem","playlistID","console","log","currentPlaylist","setCurrentPlaylist","updateSongList","array","updatePlaylistInfo","name","uri","description","href","id","images","external_urls","image","url","external_url","post","userData","then","res","data","tracks","items","catch","error","content"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\n\r\nimport { useState } from \"react\"\r\nimport PauseButton from \"./pauseButton\";\r\nimport PlayButton from \"./playButton\";\r\nimport PlaylistCard from \"./playlistCard\";\r\nimport ResumeButton from \"./resumeButton\";\r\nimport SongSection from \"./songSection\";\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction PlaylistSection(props) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // use state in order to select a playlist id from local storage\r\n    const [playlistArrayNum, setPlaylistArrayNumber] = useState(0)\r\n\r\n    function nextPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum + 1)\r\n    }\r\n\r\n    function prevPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum - 1)\r\n    }\r\n\r\n    if (playlistArrayNum < -1) {\r\n        nextPlaylistHandler()\r\n    }\r\n\r\n    if (playlistArrayNum > 10) {\r\n        prevPlaylistHandler()\r\n    }\r\n\r\n\r\n    const [playlistInfo, setPlaylistInfo] = useState({})\r\n\r\n\r\n    let songList = []\r\n\r\n\r\n    var accessToken = localStorage.getItem(\"spotifyToken\")\r\n\r\n    var playlistID = localStorage.getItem(`musicplaylistcode${playlistArrayNum}`)\r\n    console.log(`current spotify playlist`, playlistID)\r\n\r\n    const [currentPlaylist, setCurrentPlaylist] = useState(playlistID)\r\n    console.log(\"CURRENT PLAYLIST\", currentPlaylist)\r\n\r\n\r\n    function updateSongList(array) {\r\n        songList = array\r\n        console.log(\"song array\")\r\n        console.log(songList)\r\n        return songList\r\n    }\r\n\r\n\r\n    function updatePlaylistInfo({ name, uri, description, href, id, images, external_urls, }) {\r\n        setPlaylistInfo(\r\n            () => {\r\n                playlistInfo.name = name\r\n                playlistInfo.uri = uri\r\n                playlistInfo.description = description\r\n                playlistInfo.href = href\r\n                playlistInfo.id = id\r\n                playlistInfo.image = images[0].url\r\n                playlistInfo.external_url = external_urls\r\n                // playlistInfo.tracks = tracks\r\n\r\n                console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo)\r\n                return playlistInfo\r\n            }\r\n        )\r\n\r\n        // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n        setIsLoading(true)\r\n        console.log(\"SET PLAYLIST IS NOW\", playlistInfo)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    // if the playlist is equal to none we set the attributes we want\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            setCurrentPlaylist(playlistID)\r\n            console.log(\"playlist ID taken from local storage\", playlistID)\r\n            // function updatePlaylistCode(ID){\r\n            //     setCurrentPlaylist(playlistID)\r\n            //     return playlistID\r\n            // }\r\n\r\n            // updatePlaylistInfo()\r\n            // axios calls whenever the playlistID changes\r\n            axios.post('/spotify-playlist', {\r\n                userData: {\r\n                    playlistID: `${playlistID}`,\r\n                    accessToken: `${accessToken}`\r\n                }\r\n            }).then(\r\n                (res) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(`music playlist res ID ${playlistID}`, res)\r\n                    // the following is printed on the browser console\r\n                    console.log(`below is the whole res`)\r\n                    // response print from the spotify custom you need to expand in browser console\r\n                    console.log(res)\r\n                    console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                    // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                    console.log(`reading music playlist res: `, res.data)\r\n\r\n                    // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\r\n\r\n                    // var playlistMusicItems = res.data\r\n                    // var playlistCodes = playlistMusicItems.map(playlistCode => {\r\n                    //     return playlistCode.id\r\n                    // })\r\n                    // updateMusicContent(playlistCodes)\r\n\r\n                    updatePlaylistInfo(res.data)\r\n                    updateSongList(res.data.tracks.items)\r\n\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(error)\r\n                }\r\n            )\r\n        }, [playlistID]\r\n    )\r\n\r\n\r\n\r\n\r\n    const content = isLoading ?\r\n        (<div>...is Loading</div>)\r\n        :\r\n        (<div> Loading Complete\r\n            <SongSection\r\n                songs={songList}\r\n            />\r\n\r\n            {/* <PlaylistCard playlistInfo={playlistInfo} />\r\n            <SongSection playlistInfo={playlistInfo} />\r\n\r\n\r\n            <PlayButton playlistInfo={playlistInfo} /> */}\r\n            <PauseButton />\r\n            <ResumeButton />\r\n        </div>)\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\">\r\n                <div >\r\n                    {playlistArrayNum > 0 && <button className=\"btn btn-outline-light\" onClick={prevPlaylistHandler}>back</button>}\r\n                    {playlistArrayNum < 10 && <button className=\"btn btn-outline-light\" onClick={nextPlaylistHandler}>next playlist</button>}\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div>\r\n\r\n                    {/* create a fetch request / axios request to our custom api point to search for and pull playlist data whenever the page renders or the playlist slot on line 25 is changed by hitting next playlist */}\r\n\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <div className=\"card-title\">\r\n                                <div>\r\n                                    {content}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PlaylistSection"]},"metadata":{},"sourceType":"module"}