{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialSpotifyState = {\n  isSpotifyAuth: false,\n  clientid: \"50885eb87ce14757bdde10e7fb01f91a\",\n  clientsecret: \"4acdaecbdc96463bbe8daee8d938550c\",\n  authcode: \"none code\",\n  accesstoken: \"none token\",\n  refreshtoken: \"none refresh\",\n  expiresin: \"none ex\"\n};\nconst spotifySlice = createSlice({\n  name: \"spotifyMusic\",\n  initialState: initialSpotifyState,\n  reducers: {\n    updateSpotifyAuth(state) {\n      state.isSpotifyAuth = !state.isSpotifyAuth;\n    },\n\n    updateSpotifyCode(state, action) {\n      state.authcode = action.payload;\n    },\n\n    updateSpotifyAccess(state, action) {\n      state.accesstoken = action.payload;\n    },\n\n    updateSpotifyRefresh(state, action) {\n      state.refreshtoken = action.payload;\n    },\n\n    updateSpotifyExpire(state, action) {\n      state.expiresin = action.payload;\n    }\n\n  }\n});\nexport const saveSpotify = res => {\n  return async dispatch => {\n    await dispatch(spotifyActions.updateSpotifyAccess(res.data.accessToken));\n    await dispatch(spotifyActions.updateSpotifyRefresh(res.data.refreshToken));\n    await dispatch(spotifyActions.updateSpotifyExpire(res.data.expiresIn));\n  };\n};\nexport const spotifyActions = spotifySlice.actions;\nexport default spotifySlice.reducer;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/store/SpotifyState.js"],"names":["createSlice","initialSpotifyState","isSpotifyAuth","clientid","clientsecret","authcode","accesstoken","refreshtoken","expiresin","spotifySlice","name","initialState","reducers","updateSpotifyAuth","state","updateSpotifyCode","action","payload","updateSpotifyAccess","updateSpotifyRefresh","updateSpotifyExpire","saveSpotify","res","dispatch","spotifyActions","data","accessToken","refreshToken","expiresIn","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,aAAa,EAAE,KADS;AAExBC,EAAAA,QAAQ,EAAE,kCAFc;AAGxBC,EAAAA,YAAY,EAAE,kCAHU;AAIxBC,EAAAA,QAAQ,EAAE,WAJc;AAKxBC,EAAAA,WAAW,EAAE,YALW;AAMxBC,EAAAA,YAAY,EAAE,cANU;AAOxBC,EAAAA,SAAS,EAAE;AAPa,CAA5B;AAUA,MAAMC,YAAY,GAAGT,WAAW,CAAC;AAC7BU,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAEV,mBAFe;AAG7BW,EAAAA,QAAQ,EAAE;AACNC,IAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACZ,aAAN,GAAsB,CAACY,KAAK,CAACZ,aAA7B;AACH,KAHK;;AAINa,IAAAA,iBAAiB,CAACD,KAAD,EAAQE,MAAR,EAAgB;AAC7BF,MAAAA,KAAK,CAACT,QAAN,GAAiBW,MAAM,CAACC,OAAxB;AACH,KANK;;AAONC,IAAAA,mBAAmB,CAACJ,KAAD,EAAQE,MAAR,EAAgB;AAC/BF,MAAAA,KAAK,CAACR,WAAN,GAAoBU,MAAM,CAACC,OAA3B;AACH,KATK;;AAUNE,IAAAA,oBAAoB,CAACL,KAAD,EAAQE,MAAR,EAAgB;AAChCF,MAAAA,KAAK,CAACP,YAAN,GAAqBS,MAAM,CAACC,OAA5B;AACH,KAZK;;AAaNG,IAAAA,mBAAmB,CAACN,KAAD,EAAQE,MAAR,EAAgB;AAC/BF,MAAAA,KAAK,CAACN,SAAN,GAAkBQ,MAAM,CAACC,OAAzB;AACH;;AAfK;AAHmB,CAAD,CAAhC;AAuBA,OAAO,MAAMI,WAAW,GAAIC,GAAD,IAAS;AAChC,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMA,QAAQ,CACVC,cAAc,CAACN,mBAAf,CAAmCI,GAAG,CAACG,IAAJ,CAASC,WAA5C,CADU,CAAd;AAEA,UAAMH,QAAQ,CACVC,cAAc,CAACL,oBAAf,CAAoCG,GAAG,CAACG,IAAJ,CAASE,YAA7C,CADU,CAAd;AAEA,UAAMJ,QAAQ,CACVC,cAAc,CAACJ,mBAAf,CAAmCE,GAAG,CAACG,IAAJ,CAASG,SAA5C,CADU,CAAd;AAEH,GAPD;AAQH,CATM;AAYP,OAAO,MAAMJ,cAAc,GAAGf,YAAY,CAACoB,OAApC;AAEP,eAAepB,YAAY,CAACqB,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\n\r\nconst initialSpotifyState = {\r\n    isSpotifyAuth: false,\r\n    clientid: \"50885eb87ce14757bdde10e7fb01f91a\",\r\n    clientsecret: \"4acdaecbdc96463bbe8daee8d938550c\",\r\n    authcode: \"none code\",\r\n    accesstoken: \"none token\",\r\n    refreshtoken: \"none refresh\",\r\n    expiresin: \"none ex\",\r\n}\r\n\r\nconst spotifySlice = createSlice({\r\n    name: \"spotifyMusic\",\r\n    initialState: initialSpotifyState,\r\n    reducers: {\r\n        updateSpotifyAuth(state) {\r\n            state.isSpotifyAuth = !state.isSpotifyAuth\r\n        },\r\n        updateSpotifyCode(state, action) {\r\n            state.authcode = action.payload\r\n        },\r\n        updateSpotifyAccess(state, action) {\r\n            state.accesstoken = action.payload\r\n        },\r\n        updateSpotifyRefresh(state, action) {\r\n            state.refreshtoken = action.payload\r\n        },\r\n        updateSpotifyExpire(state, action) {\r\n            state.expiresin = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const saveSpotify = (res) => {\r\n    return async (dispatch) => {\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyAccess(res.data.accessToken))\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyRefresh(res.data.refreshToken))\r\n        await dispatch(\r\n            spotifyActions.updateSpotifyExpire(res.data.expiresIn))\r\n    }\r\n}\r\n\r\n\r\nexport const spotifyActions = spotifySlice.actions\r\n\r\nexport default spotifySlice.reducer"]},"metadata":{},"sourceType":"module"}