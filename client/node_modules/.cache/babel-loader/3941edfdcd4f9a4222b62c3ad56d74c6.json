{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // using toolkit in order to shortcut some template code to make overall code smaller and easier to manage\n// setting the initail state object, this is the master state which will be an expanded object\n\nconst initialControlState = {\n  showContentBox: true\n}; // the create slice method creates sections in which we can manipulate the state within the reducer\n\nconst userControlSlice = createSlice({\n  name: \"userControls\",\n  initialState: initialControlState,\n  reducers: {\n    toggleContentBox(state) {\n      state.showContentBox = !state.showContentBox;\n    }\n\n  }\n}); // using contentSlice .actions will match the reducers to their own generated key pairs, no longer need to write out {type: example}\n// toolkit creates an \"action creator\"  which will create the actions object for us, using the methods we run in the reducers prop under contentSlice\n\nexport const controlActions = userControlSlice.actions; // we will be exporting only the reducers to the configure store since it wont need the entire slice, just the reducers and actions\n\nexport default userControlSlice.reducer;","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/store/UserControls.js"],"names":["createSlice","initialControlState","showContentBox","userControlSlice","name","initialState","reducers","toggleContentBox","state","controlActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;AAEA;;AACA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,cAAc,EAAE;AADQ,CAA5B,C,CAKA;;AACA,MAAMC,gBAAgB,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,cAD2B;AAEjCC,EAAAA,YAAY,EAAEJ,mBAFmB;AAGjCK,EAAAA,QAAQ,EAAE;AACNC,IAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACN,cAAN,GAAuB,CAACM,KAAK,CAACN,cAA9B;AACH;;AAHK;AAHuB,CAAD,CAApC,C,CAYA;AACA;;AACA,OAAO,MAAMO,cAAc,GAAGN,gBAAgB,CAACO,OAAxC,C,CAEP;;AAEA,eAAeP,gBAAgB,CAACQ,OAAhC","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n// using toolkit in order to shortcut some template code to make overall code smaller and easier to manage\r\n\r\n// setting the initail state object, this is the master state which will be an expanded object\r\nconst initialControlState = {\r\n    showContentBox: true\r\n}\r\n\r\n\r\n// the create slice method creates sections in which we can manipulate the state within the reducer\r\nconst userControlSlice = createSlice({\r\n    name: \"userControls\",\r\n    initialState: initialControlState,\r\n    reducers: {\r\n        toggleContentBox(state) {\r\n            state.showContentBox = !state.showContentBox\r\n        }\r\n    }\r\n\r\n})\r\n\r\n\r\n// using contentSlice .actions will match the reducers to their own generated key pairs, no longer need to write out {type: example}\r\n// toolkit creates an \"action creator\"  which will create the actions object for us, using the methods we run in the reducers prop under contentSlice\r\nexport const controlActions = userControlSlice.actions;\r\n\r\n// we will be exporting only the reducers to the configure store since it wont need the entire slice, just the reducers and actions\r\n\r\nexport default userControlSlice.reducer;"]},"metadata":{},"sourceType":"module"}