{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\PlaylistSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport SongSection from \"./SongSection\";\nimport styles from \"./PlaylistSectionStyles.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction PlaylistSection(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true); // use state in order to select a playlist id from local storage\n\n  const [playlistArrayNum, setPlaylistArrayNumber] = useState(0);\n\n  function nextPlaylistHandler() {\n    setPlaylistArrayNumber(playlistArrayNum + 1);\n  }\n\n  function prevPlaylistHandler() {\n    setPlaylistArrayNumber(playlistArrayNum - 1);\n  } // if (playlistArrayNum < -1) {\n  //     nextPlaylistHandler()\n  // }\n  // if (playlistArrayNum > 10) {\n  //     prevPlaylistHandler()\n  // }\n\n\n  const [playlistInfo, setPlaylistInfo] = useState({});\n  let songList = [];\n  var accessToken = localStorage.getItem(\"spotifyToken\");\n  var playlistID = localStorage.getItem(`musicplaylistcode${playlistArrayNum}`);\n  console.log(`current spotify playlist`, playlistID);\n  const [currentPlaylist, setCurrentPlaylist] = useState(playlistID);\n  console.log(\"CURRENT PLAYLIST\", currentPlaylist);\n\n  function updateSongList(array) {\n    let songList = array;\n    console.log(\"song array\");\n    console.log(songList);\n    return songList;\n  }\n\n  useEffect(() => {\n    setCurrentPlaylist(playlistID);\n    console.log(\"playlist ID taken from local storage\", playlistID); // function updatePlaylistCode(ID){\n    //     setCurrentPlaylist(playlistID)\n    //     return playlistID\n    // }\n    // updatePlaylistInfo()\n    // axios calls whenever the playlistID changes\n\n    axios.post('/spotify-playlist', {\n      userData: {\n        playlistID: `${playlistID}`,\n        accessToken: `${accessToken}`\n      }\n    }).then(res => {\n      console.log(\"setting is loading to false\");\n      setIsLoading(false);\n      console.log(`music playlist res ID ${playlistID}`, res); // the following is printed on the browser console\n\n      console.log(`below is the whole res`); // response print from the spotify custom you need to expand in browser console\n\n      console.log(res);\n      console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\"); // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\n\n      console.log(`reading music playlist res: `, res.data); // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\n      // var playlistMusicItems = res.data\n      // var playlistCodes = playlistMusicItems.map(playlistCode => {\n      //     return playlistCode.id\n      // })\n      // updateMusicContent(playlistCodes)\n      // updatePlaylistInfo(res.data)\n\n      setPlaylistInfo(() => {\n        playlistInfo.name = res.data.name;\n        playlistInfo.uri = res.data.uri;\n        playlistInfo.description = res.data.description;\n        playlistInfo.href = res.data.href;\n        playlistInfo.id = res.data.id;\n        playlistInfo.image = res.data.images[0].url;\n        playlistInfo.external_url = res.data.external_urls;\n        playlistInfo.tracks = res.data.tracks.items;\n        console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo);\n        return playlistInfo;\n      });\n      updateSongList(res.data.tracks.items); // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\n\n      setIsLoading(true);\n      console.log(\"SET PLAYLIST IS NOW\", playlistInfo);\n      setIsLoading(false);\n    }).catch(error => {\n      console.log(\"setting is loading to false\");\n      setIsLoading(false);\n      console.log(error);\n    });\n  }, [playlistID]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.playlist_section,\n      children: [!isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.playlist_card,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.playlist_image,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlistInfo.image,\n            alt: \"playlist graphic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.playlist_info,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: styles.playlist_title,\n              children: [\"Current Playlist \", playlistArrayNum]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: playlistInfo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !isLoading && /*#__PURE__*/_jsxDEV(SongSection, {\n          trackList: playlistInfo.tracks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlaylistSection, \"XzoEPVVz35pqFsRgfatg/ODUhU8=\");\n\n_c = PlaylistSection;\nexport default PlaylistSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistSection\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/PlaylistSection.js"],"names":["React","Fragment","useEffect","useState","SongSection","styles","axios","require","PlaylistSection","props","isLoading","setIsLoading","playlistArrayNum","setPlaylistArrayNumber","nextPlaylistHandler","prevPlaylistHandler","playlistInfo","setPlaylistInfo","songList","accessToken","localStorage","getItem","playlistID","console","log","currentPlaylist","setCurrentPlaylist","updateSongList","array","post","userData","then","res","data","name","uri","description","href","id","image","images","url","external_url","external_urls","tracks","items","catch","error","playlist_section","playlist_card","playlist_image","playlist_info","playlist_title"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\n\r\nimport { useState } from \"react\"\r\nimport SongSection from \"./SongSection\";\r\n\r\nimport styles from \"./PlaylistSectionStyles.module.css\"\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction PlaylistSection(props) {\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // use state in order to select a playlist id from local storage\r\n    const [playlistArrayNum, setPlaylistArrayNumber] = useState(0)\r\n\r\n    function nextPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum + 1)\r\n    }\r\n\r\n    function prevPlaylistHandler() {\r\n        setPlaylistArrayNumber(playlistArrayNum - 1)\r\n    }\r\n\r\n    // if (playlistArrayNum < -1) {\r\n    //     nextPlaylistHandler()\r\n    // }\r\n\r\n    // if (playlistArrayNum > 10) {\r\n    //     prevPlaylistHandler()\r\n    // }\r\n\r\n\r\n    const [playlistInfo, setPlaylistInfo] = useState({})\r\n\r\n\r\n    let songList = []\r\n\r\n\r\n    var accessToken = localStorage.getItem(\"spotifyToken\")\r\n\r\n    var playlistID = localStorage.getItem(`musicplaylistcode${playlistArrayNum}`)\r\n    console.log(`current spotify playlist`, playlistID)\r\n\r\n    const [currentPlaylist, setCurrentPlaylist] = useState(playlistID)\r\n    console.log(\"CURRENT PLAYLIST\", currentPlaylist)\r\n\r\n\r\n    function updateSongList(array) {\r\n        let songList = array\r\n        console.log(\"song array\")\r\n        console.log(songList)\r\n        return songList\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            setCurrentPlaylist(playlistID)\r\n            console.log(\"playlist ID taken from local storage\", playlistID)\r\n            // function updatePlaylistCode(ID){\r\n            //     setCurrentPlaylist(playlistID)\r\n            //     return playlistID\r\n            // }\r\n\r\n            // updatePlaylistInfo()\r\n            // axios calls whenever the playlistID changes\r\n            axios.post('/spotify-playlist', {\r\n                userData: {\r\n                    playlistID: `${playlistID}`,\r\n                    accessToken: `${accessToken}`\r\n                }\r\n            }).then(\r\n                (res) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(`music playlist res ID ${playlistID}`, res)\r\n                    // the following is printed on the browser console\r\n                    console.log(`below is the whole res`)\r\n                    // response print from the spotify custom you need to expand in browser console\r\n                    console.log(res)\r\n                    console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                    // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                    console.log(`reading music playlist res: `, res.data)\r\n\r\n                    // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\r\n\r\n                    // var playlistMusicItems = res.data\r\n                    // var playlistCodes = playlistMusicItems.map(playlistCode => {\r\n                    //     return playlistCode.id\r\n                    // })\r\n                    // updateMusicContent(playlistCodes)\r\n\r\n                    // updatePlaylistInfo(res.data)\r\n\r\n                    setPlaylistInfo(\r\n                        () => {\r\n                            playlistInfo.name = res.data.name\r\n                            playlistInfo.uri = res.data.uri\r\n                            playlistInfo.description = res.data.description\r\n                            playlistInfo.href = res.data.href\r\n                            playlistInfo.id = res.data.id\r\n                            playlistInfo.image = res.data.images[0].url\r\n                            playlistInfo.external_url = res.data.external_urls\r\n                            playlistInfo.tracks = res.data.tracks.items\r\n\r\n                            console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo)\r\n                            return playlistInfo\r\n                        }\r\n                    )\r\n                    updateSongList(res.data.tracks.items)\r\n\r\n                    // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n                    setIsLoading(true)\r\n                    console.log(\"SET PLAYLIST IS NOW\", playlistInfo)\r\n                    setIsLoading(false)\r\n\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    console.log(\"setting is loading to false\")\r\n                    setIsLoading(false)\r\n                    console.log(error)\r\n                }\r\n            )\r\n        }, [playlistID]\r\n    )\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={styles.playlist_section}>\r\n                {!isLoading && (<div className={styles.playlist_card}>\r\n                    <div className={styles.playlist_image}>\r\n                        <img src={playlistInfo.image} alt=\"playlist graphic\" />\r\n                    </div>\r\n                    <div className={styles.playlist_info}>\r\n                        <div>\r\n                            <h2 className={styles.playlist_title}>Current Playlist {playlistArrayNum}</h2>\r\n                            <div>{playlistInfo.name}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>)\r\n                }\r\n\r\n\r\n                <div>\r\n                    {!isLoading && <SongSection trackList={playlistInfo.tracks} />}\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default PlaylistSection"]},"metadata":{},"sourceType":"module"}