{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\pages\\\\intropage.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\nimport { useParams } from \"react-router\";\nimport { spotifyActions } from \"../store/SpotifyState\";\nimport { useLocation } from \"react-router-dom\";\nimport Welcome from \"../components/Welcome\";\nimport WelcomeBack from \"../components/WelcomeBack\";\nimport styles from '../components/welcomeStyles.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction Intropage() {\n  _s();\n\n  const location = useLocation();\n  console.log(location); // the slice needs to be at 6 in order for the api call to work DO NOT TOUCH\n\n  let locationCode = location.search.slice(6);\n  console.log(`current location code from slice: ${locationCode}`);\n  console.log(`current location CODE SLICE from slice: ${location.search.slice(0, 6)}`); // locationCode = location.search.slice(0, 6)\n\n  const params = useParams();\n  console.log(`current code from params ${params.musicAuthCode}`);\n  const musicPassword = useSelector(state => state.spotify.authcode);\n  const musicToken = useSelector(state => state.spotify.accesstoken);\n  const musicRefresh = useSelector(state => state.spotify.refreshtoken);\n  const musicEx = useSelector(state => state.spotify.expiresin);\n  const dispatch = useDispatch();\n\n  function spotifyAuthToggler() {\n    dispatch(spotifyActions.updateSpotifyAuth());\n  }\n\n  function userSpotifyAuthHandler() {\n    axios.get('/spotify-redirect').then(response => {\n      console.log(response.data);\n      window.location.href = `${response.data}`;\n    }).catch(error => {\n      console.log(error);\n    }); // dispatch(spotifyActions.updateSpotifyCode(locationCode))\n    // window.location.href = authlink\n    // requestSpotifyAuth()\n    // console.log(`current code from redirect button: ${musicPassword}`)\n  } // const client_id = useSelector((state) => state.spotify.clientid)\n  // const client_secret = useSelector((state) => state.spotify.clientsecret)\n  // function requestSpotifyAuth() {\n  // const redirect_uri = \"http://localhost:3000\"\n  // const authlink = \"https://accounts.spotify.com/authorize\"\n  // var url = authlink;\n  // url += \"?client_id=\" + client_id;\n  // url += \"&response_type=code\";\n  // url += \"&redirect_uri=\" + encodeURI(redirect_uri);\n  // // url += \"&show_dialog=true\";\n  // // url += \"&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private\";\n  // window.location.href = url\n  // }\n  // first page load should fail, passes nothing into locationCode, should work on return\n  //console logging all state\n\n\n  console.log(`current token: ${musicToken}`);\n  console.log(`current code: ${musicPassword}`);\n  console.log(`current refresh: ${musicRefresh}`);\n  console.log(`current expire: ${musicEx}`); // if (locationCode.length > 10) {\n  //     \n  // }\n\n  axios.get('/fruits').then(res => {\n    console.log(res.data);\n  }).catch(error => {\n    console.log(error);\n  });\n\n  if (locationCode.length > 20) {\n    dispatch(spotifyActions.updateSpotifyCode(locationCode));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bg,\n      children: /*#__PURE__*/_jsxDEV(WelcomeBack, {\n        newCode: locationCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.bg,\n      children: /*#__PURE__*/_jsxDEV(Welcome, {\n        userWelcome: spotifyAuthToggler,\n        onRedirect: userSpotifyAuthHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Intropage, \"G1f6eHNFdABE4KQthCJi2Rf1Z7U=\", false, function () {\n  return [useLocation, useParams, useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Intropage;\nexport default Intropage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Intropage\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/pages/intropage.js"],"names":["useDispatch","useSelector","useNavigate","useParams","spotifyActions","useLocation","Welcome","WelcomeBack","styles","axios","require","Intropage","location","console","log","locationCode","search","slice","params","musicAuthCode","musicPassword","state","spotify","authcode","musicToken","accesstoken","musicRefresh","refreshtoken","musicEx","expiresin","dispatch","spotifyAuthToggler","updateSpotifyAuth","userSpotifyAuthHandler","get","then","response","data","window","href","catch","error","res","length","updateSpotifyCode","bg"],"mappings":"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","sourcesContent":["\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router\"\r\nimport { useParams } from \"react-router\"\r\nimport { spotifyActions } from \"../store/SpotifyState\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport Welcome from \"../components/Welcome\"\r\nimport WelcomeBack from \"../components/WelcomeBack\"\r\nimport styles from '../components/welcomeStyles.module.css'\r\n\r\nconst axios = require('axios')\r\n\r\nfunction Intropage() {\r\n    const location = useLocation()\r\n    console.log(location)\r\n    // the slice needs to be at 6 in order for the api call to work DO NOT TOUCH\r\n    let locationCode = location.search.slice(6)\r\n    console.log(`current location code from slice: ${locationCode}`)\r\n    console.log(`current location CODE SLICE from slice: ${location.search.slice(0, 6)}`)\r\n\r\n    // locationCode = location.search.slice(0, 6)\r\n\r\n    const params = useParams()\r\n    console.log(`current code from params ${params.musicAuthCode}`)\r\n\r\n    const musicPassword = useSelector((state) => state.spotify.authcode)\r\n    const musicToken = useSelector((state) => state.spotify.accesstoken)\r\n    const musicRefresh = useSelector((state) => state.spotify.refreshtoken)\r\n    const musicEx = useSelector((state) => state.spotify.expiresin)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    function spotifyAuthToggler() {\r\n        dispatch(spotifyActions.updateSpotifyAuth())\r\n    }\r\n\r\n    function userSpotifyAuthHandler() {\r\n\r\n        axios.get('/spotify-redirect').then(response => {\r\n            console.log(response.data)\r\n            window.location.href = `${response.data}`\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        // dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        // window.location.href = authlink\r\n        // requestSpotifyAuth()\r\n        // console.log(`current code from redirect button: ${musicPassword}`)\r\n    }\r\n\r\n\r\n    // const client_id = useSelector((state) => state.spotify.clientid)\r\n    // const client_secret = useSelector((state) => state.spotify.clientsecret)\r\n\r\n    // function requestSpotifyAuth() {\r\n    // const redirect_uri = \"http://localhost:3000\"\r\n    // const authlink = \"https://accounts.spotify.com/authorize\"\r\n    // var url = authlink;\r\n    // url += \"?client_id=\" + client_id;\r\n    // url += \"&response_type=code\";\r\n    // url += \"&redirect_uri=\" + encodeURI(redirect_uri);\r\n    // // url += \"&show_dialog=true\";\r\n    // // url += \"&scope=user-read-private user-read-email user-modify-playback-state user-read-playback-position user-library-read streaming user-read-playback-state user-read-recently-played playlist-read-private\";\r\n    // window.location.href = url\r\n    // }\r\n\r\n    // first page load should fail, passes nothing into locationCode, should work on return\r\n\r\n\r\n    //console logging all state\r\n    console.log(`current token: ${musicToken}`)\r\n    console.log(`current code: ${musicPassword}`)\r\n    console.log(`current refresh: ${musicRefresh}`)\r\n    console.log(`current expire: ${musicEx}`)\r\n\r\n\r\n    // if (locationCode.length > 10) {\r\n    //     \r\n    // }\r\n\r\n\r\n    axios.get('/fruits').then(\r\n        (res) => {\r\n            console.log(res.data)\r\n        }\r\n    ).catch((error) => {\r\n        console.log(error)\r\n    })\r\n\r\n\r\n\r\n    if (locationCode.length > 20) {\r\n        dispatch(spotifyActions.updateSpotifyCode(locationCode))\r\n        return (\r\n            <div className={styles.bg}>\r\n                <WelcomeBack newCode={locationCode} />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={styles.bg}>\r\n                <Welcome userWelcome={spotifyAuthToggler} onRedirect={userSpotifyAuthHandler} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Intropage"]},"metadata":{},"sourceType":"module"}