{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport { useButton } from '../ButtonUnstyled';\nexport default function useMenuItem(props) {\n  const {\n    disabled = false,\n    ref,\n    label\n  } = props;\n  const id = useId();\n  const menuContext = React.useContext(MenuUnstyledContext);\n  const itemRef = React.useRef(null);\n  const handleRef = useForkRef(itemRef, ref);\n\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n\n  const {\n    registerItem,\n    unregisterItem,\n    open\n  } = menuContext;\n  React.useEffect(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n\n    registerItem(id, {\n      disabled,\n      id,\n      ref: itemRef,\n      label\n    });\n    return () => unregisterItem(id);\n  }, [id, registerItem, unregisterItem, disabled, ref, label]);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true,\n    ref: handleRef\n  }); // Ensure the menu item is focused when highlighted\n\n  const [focusRequested, requestFocus] = React.useState(false);\n  const focusIfRequested = React.useCallback(() => {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(() => {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id,\n    disabled,\n    label\n  });\n  const itemState = menuContext.getItemState(id != null ? id : '');\n  const {\n    highlighted\n  } = itemState != null ? itemState : {\n    highlighted: false\n  };\n  React.useEffect(() => {\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n\n  if (id === undefined) {\n    return {\n      getRootProps: other => _extends({}, other, getButtonProps(other), {\n        role: 'menuitem'\n      }),\n      itemState: null,\n      focusVisible\n    };\n  }\n\n  return {\n    getRootProps: other => {\n      const optionProps = menuContext.getItemProps(id, other);\n      return _extends({}, other, getButtonProps(other), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    itemState,\n    focusVisible\n  };\n}","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/node_modules/@mui/base/MenuItemUnstyled/useMenuItem.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","MenuUnstyledContext","useButton","useMenuItem","props","disabled","ref","label","id","menuContext","useContext","itemRef","useRef","handleRef","Error","registerItem","unregisterItem","open","useEffect","undefined","getRootProps","getButtonProps","focusVisible","focusableWhenDisabled","focusRequested","requestFocus","useState","focusIfRequested","useCallback","current","focus","useDebugValue","itemState","getItemState","highlighted","other","role","optionProps","getItemProps","tabIndex"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { MenuUnstyledContext } from '../MenuUnstyled';\nimport { useButton } from '../ButtonUnstyled';\nexport default function useMenuItem(props) {\n  const {\n    disabled = false,\n    ref,\n    label\n  } = props;\n  const id = useId();\n  const menuContext = React.useContext(MenuUnstyledContext);\n  const itemRef = React.useRef(null);\n  const handleRef = useForkRef(itemRef, ref);\n\n  if (menuContext === null) {\n    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');\n  }\n\n  const {\n    registerItem,\n    unregisterItem,\n    open\n  } = menuContext;\n  React.useEffect(() => {\n    if (id === undefined) {\n      return undefined;\n    }\n\n    registerItem(id, {\n      disabled,\n      id,\n      ref: itemRef,\n      label\n    });\n    return () => unregisterItem(id);\n  }, [id, registerItem, unregisterItem, disabled, ref, label]);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true,\n    ref: handleRef\n  }); // Ensure the menu item is focused when highlighted\n\n  const [focusRequested, requestFocus] = React.useState(false);\n  const focusIfRequested = React.useCallback(() => {\n    if (focusRequested && itemRef.current != null) {\n      itemRef.current.focus();\n      requestFocus(false);\n    }\n  }, [focusRequested]);\n  React.useEffect(() => {\n    focusIfRequested();\n  });\n  React.useDebugValue({\n    id,\n    disabled,\n    label\n  });\n  const itemState = menuContext.getItemState(id != null ? id : '');\n  const {\n    highlighted\n  } = itemState != null ? itemState : {\n    highlighted: false\n  };\n  React.useEffect(() => {\n    requestFocus(highlighted && open);\n  }, [highlighted, open]);\n\n  if (id === undefined) {\n    return {\n      getRootProps: other => _extends({}, other, getButtonProps(other), {\n        role: 'menuitem'\n      }),\n      itemState: null,\n      focusVisible\n    };\n  }\n\n  return {\n    getRootProps: other => {\n      const optionProps = menuContext.getItemProps(id, other);\n      return _extends({}, other, getButtonProps(other), {\n        tabIndex: optionProps.tabIndex,\n        id: optionProps.id,\n        role: 'menuitem'\n      });\n    },\n    itemState,\n    focusVisible\n  };\n}"]},"metadata":{},"sourceType":"module"}