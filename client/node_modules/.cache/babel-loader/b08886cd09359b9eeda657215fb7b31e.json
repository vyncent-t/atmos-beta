{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\musicControls.js\",\n    _s = $RefreshSig$();\n\nimport PauseButton from \"./pauseButton\";\nimport PlayButton from \"./playButton\";\nimport ResumeButton from \"./resumeButton\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MusicControls(props) {\n  _s();\n\n  const [isMusicLoading, setIsMusicLoading] = useState(true);\n  console.log(\"print props for music controls\");\n  console.log(props);\n  let musicArrayList = props.songList;\n  let numSongsAvailable = musicArrayList.length;\n  console.log(`current music control list is ${numSongsAvailable} songs long`); // next and previous logic for songs\n\n  const [songArrayNum, setSongArrayNumber] = useState(0);\n\n  function nextSongHandler() {\n    setSongArrayNumber(songArrayNum + 1);\n  }\n\n  function prevSongHandler() {\n    setSongArrayNumber(songArrayNum - 1);\n  }\n\n  let currentSong = musicArrayList[songArrayNum]; // const [nowSong, setNowSong] = useState(currentSong)\n\n  console.log(\"data from current song in song conrols\");\n  console.log(currentSong); // console.log(`name of song playing is ${nowSong.track.name}`)\n  // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\n\n  if (currentSong.track === null) {\n    setIsMusicLoading(true);\n  } else {\n    console.log(\"CURRENT SONG IS NOW\", currentSong);\n    setIsMusicLoading(false);\n  }\n\n  const musicContent = isMusicLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"...music loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [songArrayNum > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-light\",\n        onClick: prevSongHandler,\n        children: \"back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), songArrayNum < numSongsAvailable - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-light\",\n        onClick: nextSongHandler,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n      currentSongCode: \"song\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResumeButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-info m-3 p-3\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"music controls\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: musicContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MusicControls, \"6yQh86A92o0ED1OuUzqTm3lpn1Y=\");\n\n_c = MusicControls;\nexport default MusicControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicControls\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/musicControls.js"],"names":["PauseButton","PlayButton","ResumeButton","useState","MusicControls","props","isMusicLoading","setIsMusicLoading","console","log","musicArrayList","songList","numSongsAvailable","length","songArrayNum","setSongArrayNumber","nextSongHandler","prevSongHandler","currentSong","track","musicContent"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE1B,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,IAAD,CAApD;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,MAAIK,cAAc,GAAGL,KAAK,CAACM,QAA3B;AACA,MAAIC,iBAAiB,GAAGF,cAAc,CAACG,MAAvC;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCG,iBAAkB,aAA/D,EAV0B,CAY1B;;AACA,QAAM,CAACE,YAAD,EAAeC,kBAAf,IAAqCZ,QAAQ,CAAC,CAAD,CAAnD;;AAEA,WAASa,eAAT,GAA2B;AACvBD,IAAAA,kBAAkB,CAACD,YAAY,GAAG,CAAhB,CAAlB;AACH;;AAED,WAASG,eAAT,GAA2B;AACvBF,IAAAA,kBAAkB,CAACD,YAAY,GAAG,CAAhB,CAAlB;AACH;;AAED,MAAII,WAAW,GAAGR,cAAc,CAACI,YAAD,CAAhC,CAvB0B,CAyB1B;;AAEAN,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYS,WAAZ,EA5B0B,CA6B1B;AAGA;;AACA,MAAIA,WAAW,CAACC,KAAZ,KAAsB,IAA1B,EAAgC;AAC5BZ,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAFD,MAEO;AACHC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCS,WAAnC;AACAX,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;;AAID,QAAMa,YAAY,GAAGd,cAAc,gBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD+B,gBAG/B;AAAA,4BACI;AAAA,iBACKQ,YAAY,GAAG,CAAf,iBACG;AAAQ,QAAA,SAAS,EAAC,uBAAlB;AAA0C,QAAA,OAAO,EAAEG,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,EAMQH,YAAY,GAAGF,iBAAiB,GAAG,CAAnC,iBACA;AAAQ,QAAA,SAAS,EAAC,uBAAlB;AAA0C,QAAA,OAAO,EAAEI,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI,QAAC,UAAD;AAAY,MAAA,eAAe,EAAE;AAA7B;AAAA;AAAA;AAAA;AAAA,YAXJ,eAYI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAoBA,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI;AAAA,gDAEI;AAAA,+BACI;AAAA,oBACKI;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA1EQhB,a;;KAAAA,a;AA6ET,eAAeA,aAAf","sourcesContent":["import PauseButton from \"./pauseButton\"\r\nimport PlayButton from \"./playButton\"\r\nimport ResumeButton from \"./resumeButton\"\r\n\r\nimport { useState } from \"react\"\r\n\r\n\r\nfunction MusicControls(props) {\r\n\r\n    const [isMusicLoading, setIsMusicLoading] = useState(true)\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n    let musicArrayList = props.songList\r\n    let numSongsAvailable = musicArrayList.length\r\n\r\n    console.log(`current music control list is ${numSongsAvailable} songs long`)\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n\r\n    function nextSongHandler() {\r\n        setSongArrayNumber(songArrayNum + 1)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        setSongArrayNumber(songArrayNum - 1)\r\n    }\r\n\r\n    let currentSong = musicArrayList[songArrayNum]\r\n\r\n    // const [nowSong, setNowSong] = useState(currentSong)\r\n\r\n    console.log(\"data from current song in song conrols\")\r\n    console.log(currentSong)\r\n    // console.log(`name of song playing is ${nowSong.track.name}`)\r\n\r\n\r\n    // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n    if (currentSong.track === null) {\r\n        setIsMusicLoading(true)\r\n    } else {\r\n        console.log(\"CURRENT SONG IS NOW\", currentSong)\r\n        setIsMusicLoading(false)\r\n    }\r\n\r\n\r\n\r\n    const musicContent = isMusicLoading ? (\r\n        <div>...music loading</div>\r\n    ) : (\r\n        <div>\r\n            <div>\r\n                {songArrayNum > 0 &&\r\n                    <button className=\"btn btn-outline-light\" onClick={prevSongHandler}>back</button>\r\n                }\r\n\r\n                {\r\n                    songArrayNum < numSongsAvailable - 1 &&\r\n                    <button className=\"btn btn-outline-light\" onClick={nextSongHandler}>next</button>\r\n                }\r\n            </div>\r\n            <PlayButton currentSongCode={\"song\"} />\r\n            <PauseButton />\r\n            <ResumeButton />\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"bg-info m-3 p-3\">\r\n            <div>\r\n                music controls\r\n                <div>\r\n                    <div>\r\n                        {musicContent}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls"]},"metadata":{},"sourceType":"module"}