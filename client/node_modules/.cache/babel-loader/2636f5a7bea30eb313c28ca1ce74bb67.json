{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\musicControls.js\",\n    _s = $RefreshSig$();\n\nimport PauseButton from \"./pauseButton\";\nimport PlayButton from \"./playButton\";\nimport ResumeButton from \"./resumeButton\";\nimport { useEffect, useState } from \"react\";\nimport SongCard from \"./songCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction MusicControls(props) {\n  _s();\n\n  let token = localStorage.getItem(\"spotifyToken\"); // next and previous logic for songs\n\n  const [songArrayNum, setSongArrayNumber] = useState(0);\n  const [songDuration, setSongDuration] = useState(0);\n  const [songPlayTime, setSongPlayTime] = useState(0);\n  const [musicPlaying, setMusicPlaying] = useState(true);\n  const [autoPlayOn, setAutoPlayOn] = useState(true);\n\n  function nextSongHandler() {\n    let nextSong = parseInt(songArrayNum) + 1;\n    setSongArrayNumber(nextSong);\n  }\n\n  function prevSongHandler() {\n    let lastSong = parseInt(songArrayNum) - 1;\n    setSongArrayNumber(lastSong);\n  }\n\n  const [currentSongInfo, setCurrentSongInfo] = useState(null);\n  const [currentSong, setCurrentSong] = useState();\n  console.log(\"print props for music controls\");\n  console.log(props);\n  let musicArrayList = props.songList;\n  console.log(\"controls array\");\n  console.log(musicArrayList);\n\n  function songMaker(song) {\n    console.log(\"song maker before setting song\");\n    console.log(song);\n    setCurrentSong(() => song);\n    console.log(\"currentsong after set\");\n    console.log(currentSong);\n  }\n\n  useEffect(() => {\n    if (!props.songList) return;\n    songMaker(props.songList[songArrayNum].track);\n  }, [songArrayNum]);\n  useEffect(() => {\n    if (!currentSong) return;\n    playSong(currentSong.uri);\n    setSongDuration(parseInt(currentSong.duration_ms));\n  }, [currentSong]); // this will rerender every 10 seconds when set to 10000\n\n  useEffect(() => {\n    let interval = null;\n\n    if (musicPlaying) {\n      interval = setInterval(() => {\n        setSongPlayTime(playTime => playTime + 10000);\n      }, 10000);\n      console.log(\"counting\");\n    } else {\n      clearInterval(interval);\n    }\n  }, [musicPlaying]);\n\n  if (songPlayTime > songDuration && autoPlayOn) {\n    nextSongHandler();\n  }\n\n  function playSong(songCode) {\n    setMusicPlaying(true);\n    axios.post('/spotify-play-music', {\n      userData: {\n        accessToken: `${token}`,\n        musicURI: songCode\n      }\n    }).then(res => {\n      console.log(\"play worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function pauseSong() {\n    setMusicPlaying(true); // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\n\n    console.log(\"pausing music\");\n    axios.post('/spotify-pause', {\n      userData: {\n        accessToken: `${token}`\n      }\n    }).then(res => {\n      console.log(\"pause worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function resumeSong() {\n    setMusicPlaying(true); // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\n\n    console.log(\"pausing music\");\n    axios.post('/spotify-pause', {\n      userData: {\n        accessToken: `${token}`\n      }\n    }).then(res => {\n      console.log(\"pause worked\");\n      console.log(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  } // on page load this plays the song passed in from currentSong in state\n\n\n  function autoPlayOnHandler(song) {\n    setAutoPlayOn(true);\n    playSong(song);\n  }\n\n  function autoPlayOffHandler(song) {\n    setAutoPlayOn(false); // playSong(song)\n  }\n\n  function songArrayHandle(event) {\n    console.log(`now printing for array placement ${event.target.value}`);\n    setSongArrayNumber(event.target.value);\n    console.log(songArrayNum);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentSong ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-info m-3 p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"music controls\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [autoPlayOn ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: autoPlayOffHandler,\n                children: \"Disable Auto Play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => {\n                  autoPlayOnHandler(currentSong.uri);\n                },\n                children: \"Enable Auto Play\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"now listening to \", currentSong.name, \" \", currentSong.uri]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [songArrayNum > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-light m-1\",\n              onClick: prevSongHandler,\n              children: \"prev track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 41\n            }, this), songArrayNum < 100 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-light m-1\",\n              onClick: nextSongHandler,\n              children: \"next track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 33\n          }, this), musicPlaying ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"PLAYING MUSIC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 50\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"NOT PLAYING\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 79\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"current place in array\", songArrayNum]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"current song duration \", songDuration]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"music playing for \", songPlayTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ResumeButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"m-3 btn btn-light\",\n              onClick: playSong,\n              children: \"Play\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"m-3 btn btn-light\",\n              onClick: pauseSong,\n              children: \"Pause\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"m-3 btn btn-light\",\n              onClick: resumeSong,\n              children: \"resume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }, this), musicArrayList && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: musicArrayList.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(SongCard, {\n            place: index,\n            arrayNum: songArrayNum,\n            uri: song.track.uri,\n            name: song.track.name // album={song.track.album.name}\n            ,\n            artist: song.track.artists[0].name,\n            id: song.track.id,\n            href: song.track.href\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              value: index,\n              onClick: songArrayHandle,\n              children: \"Play\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MusicControls, \"5jAT2KIJFpEHS91MI4DGooDHVN8=\");\n\n_c = MusicControls;\nexport default MusicControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicControls\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/musicControls.js"],"names":["PauseButton","PlayButton","ResumeButton","useEffect","useState","SongCard","axios","require","MusicControls","props","token","localStorage","getItem","songArrayNum","setSongArrayNumber","songDuration","setSongDuration","songPlayTime","setSongPlayTime","musicPlaying","setMusicPlaying","autoPlayOn","setAutoPlayOn","nextSongHandler","nextSong","parseInt","prevSongHandler","lastSong","currentSongInfo","setCurrentSongInfo","currentSong","setCurrentSong","console","log","musicArrayList","songList","songMaker","song","track","playSong","uri","duration_ms","interval","setInterval","playTime","clearInterval","songCode","post","userData","accessToken","musicURI","then","res","catch","err","pauseSong","resumeSong","autoPlayOnHandler","autoPlayOffHandler","songArrayHandle","event","target","value","name","map","index","artists","id","href"],"mappings":"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","sourcesContent":["import PauseButton from \"./pauseButton\"\r\nimport PlayButton from \"./playButton\"\r\nimport ResumeButton from \"./resumeButton\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport SongCard from \"./songCard\"\r\n\r\n\r\n\r\nconst axios = require('axios')\r\n\r\nfunction MusicControls(props) {\r\n\r\n    let token = localStorage.getItem(\"spotifyToken\")\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n    const [songDuration, setSongDuration] = useState(0)\r\n    const [songPlayTime, setSongPlayTime] = useState(0)\r\n    const [musicPlaying, setMusicPlaying] = useState(true)\r\n    const [autoPlayOn, setAutoPlayOn] = useState(true)\r\n\r\n    function nextSongHandler() {\r\n        let nextSong = parseInt(songArrayNum) + 1\r\n        setSongArrayNumber(nextSong)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        let lastSong = parseInt(songArrayNum) - 1\r\n\r\n        setSongArrayNumber(lastSong)\r\n    }\r\n\r\n    const [currentSongInfo, setCurrentSongInfo] = useState(null)\r\n\r\n\r\n    const [currentSong, setCurrentSong] = useState()\r\n\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n\r\n    let musicArrayList = props.songList\r\n\r\n\r\n    console.log(\"controls array\")\r\n    console.log(musicArrayList)\r\n\r\n\r\n\r\n    function songMaker(song) {\r\n        console.log(\"song maker before setting song\")\r\n        console.log(song)\r\n        setCurrentSong(\r\n            () => song\r\n        )\r\n        console.log(\"currentsong after set\")\r\n        console.log(currentSong)\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!props.songList) return\r\n\r\n\r\n            songMaker(props.songList[songArrayNum].track)\r\n        }, [songArrayNum]\r\n    )\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!currentSong) return\r\n\r\n\r\n            playSong(currentSong.uri)\r\n            setSongDuration((parseInt(currentSong.duration_ms)))\r\n        }, [currentSong]\r\n    )\r\n\r\n\r\n\r\n    // this will rerender every 10 seconds when set to 10000\r\n    useEffect(() => {\r\n        let interval = null\r\n\r\n        if (musicPlaying) {\r\n            interval = setInterval(() => {\r\n                setSongPlayTime(playTime => playTime + 10000)\r\n            }, 10000)\r\n            console.log(\"counting\")\r\n        } else {\r\n            clearInterval(interval)\r\n        }\r\n    }, [musicPlaying])\r\n\r\n\r\n    if ((songPlayTime > songDuration) && autoPlayOn) {\r\n        nextSongHandler()\r\n    }\r\n\r\n    function playSong(songCode) {\r\n\r\n        setMusicPlaying(true)\r\n\r\n        axios.post('/spotify-play-music', {\r\n            userData: {\r\n                accessToken: `${token}`,\r\n                musicURI: songCode\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"play worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    function pauseSong() {\r\n        setMusicPlaying(true)\r\n        // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\r\n        console.log(\"pausing music\")\r\n        axios.post('/spotify-pause', {\r\n            userData: {\r\n                accessToken: `${token}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"pause worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n    function resumeSong() {\r\n        setMusicPlaying(true)\r\n        // when the button is pressed, statement prints, token is set to a property on the userData object to be passed in to the proper route\r\n        console.log(\"pausing music\")\r\n        axios.post('/spotify-pause', {\r\n            userData: {\r\n                accessToken: `${token}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(\"pause worked\")\r\n                console.log(res)\r\n            }\r\n        ).catch(\r\n            (err) => {\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n    // on page load this plays the song passed in from currentSong in state\r\n    function autoPlayOnHandler(song) {\r\n        setAutoPlayOn(true)\r\n        playSong(song)\r\n    }\r\n\r\n    function autoPlayOffHandler(song) {\r\n        setAutoPlayOn(false)\r\n        // playSong(song)\r\n    }\r\n\r\n    function songArrayHandle(event) {\r\n        console.log(`now printing for array placement ${event.target.value\r\n            }`)\r\n\r\n        setSongArrayNumber(event.target.value)\r\n        console.log(songArrayNum)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentSong ?\r\n                (\r\n                    <div className=\"bg-info m-3 p-3\">\r\n                        <div>\r\n                            music controls\r\n                            <div>\r\n                                <div>\r\n                                    {\r\n                                        autoPlayOn ? (\r\n                                            <div>\r\n                                                <button className=\"btn btn-success\" onClick={\r\n                                                    autoPlayOffHandler} >Disable Auto Play</button>\r\n                                            </div>\r\n                                        ) : <div>\r\n                                            <button className=\"btn btn-success\" onClick={\r\n                                                () => { autoPlayOnHandler(currentSong.uri) }\r\n                                            }>Enable Auto Play</button>\r\n                                        </div>\r\n                                    }\r\n                                    <div>\r\n                                        now listening to {currentSong.name} {currentSong.uri}\r\n                                    </div>\r\n                                </div>\r\n                                <div>\r\n                                    {songArrayNum > 0 &&\r\n                                        <button className=\"btn btn-light m-1\" onClick={prevSongHandler}>prev track</button>\r\n                                    }\r\n\r\n                                    {\r\n                                        songArrayNum < 100 &&\r\n                                        <button className=\"btn btn-light m-1\" onClick={nextSongHandler}>next track</button>\r\n                                    }\r\n                                </div>\r\n                                {musicPlaying ? (<div>PLAYING MUSIC</div>) : (<div>NOT PLAYING</div>)}\r\n                                <div>\r\n                                    current place in array{songArrayNum}\r\n                                </div>\r\n                                <div>\r\n                                    current song duration {songDuration}\r\n                                </div>\r\n                                <div>\r\n                                    music playing for {songPlayTime}\r\n                                </div>\r\n                                {/* <PlayButton song={currentSong.uri} /> */}\r\n                                <PauseButton />\r\n                                <ResumeButton />\r\n                                <div>\r\n                                    <button className=\"m-3 btn btn-light\" onClick={playSong}>Play</button>\r\n                                    <button className=\"m-3 btn btn-light\" onClick={pauseSong}>Pause</button>\r\n                                    <button className=\"m-3 btn btn-light\" onClick={resumeSong}>resume</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {musicArrayList &&\r\n                            <div>\r\n                                {musicArrayList.map(\r\n                                    (song, index) => (\r\n                                        <div>\r\n                                            <SongCard\r\n                                                place={index}\r\n                                                arrayNum={songArrayNum}\r\n                                                uri={song.track.uri}\r\n                                                name={song.track.name}\r\n                                                // album={song.track.album.name}\r\n                                                artist={song.track.artists[0].name}\r\n                                                id={song.track.id}\r\n                                                href={song.track.href}\r\n                                            />\r\n                                            <span>\r\n                                                <button className=\"btn btn-primary\" value={index} onClick={songArrayHandle}>Play</button>\r\n                                            </span>\r\n                                        </div>\r\n                                    )\r\n                                )}\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                ) :\r\n                (<div>Loading...</div>)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls"]},"metadata":{},"sourceType":"module"}