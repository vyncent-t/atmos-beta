{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\musicControls.js\",\n    _s = $RefreshSig$();\n\nimport PauseButton from \"./pauseButton\";\nimport PlayButton from \"./playButton\";\nimport ResumeButton from \"./resumeButton\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MusicControls(props) {\n  _s();\n\n  // next and previous logic for songs\n  const [songArrayNum, setSongArrayNumber] = useState(0);\n\n  function nextSongHandler() {\n    setSongArrayNumber(songArrayNum + 1);\n  }\n\n  function prevSongHandler() {\n    setSongArrayNumber(songArrayNum - 1);\n  } // let currentSong = musicArrayList[songArrayNum]\n\n\n  const [currentSongInfo, setCurrentSongInfo] = useState(null);\n  const [currentSong, setCurrentSong] = useState();\n  console.log(\"print props for music controls\");\n  console.log(props);\n  let musicArrayList = props.songList; // let currentSong = props.songList[songArrayNum]\n\n  console.log(\"controls array\");\n  console.log(musicArrayList); // let numSongsAvailable = musicArrayList.length\n  // console.log(`current music control list is ${numSongsAvailable} songs long`)\n  // const [nowSong, setNowSong] = useState(\"now song\")\n\n  function songMaker(song) {\n    console.log(\"song maker before setting song\");\n    console.log(song);\n    setCurrentSong(() => song);\n    console.log(\"currentsong after set\");\n    console.log(currentSong);\n  }\n\n  useEffect(() => {\n    if (!props.songList) return;\n    songMaker(props.songList[songArrayNum].track); // if (!currentSong.track.name) return\n  }, [songArrayNum]);\n  console.log(\"data from current song in song conrols\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentSong ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-info m-3 p-3\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"music controls\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"(\", /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"now listening to \", currentSong.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 38\n            }, this), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [songArrayNum > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-light\",\n              onClick: prevSongHandler,\n              children: \"prev track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 41\n            }, this), songArrayNum < 100 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-light\",\n              onClick: nextSongHandler,\n              children: \"next track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(PlayButton, {\n            currentSongCode: currentSong.uri\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ResumeButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 18\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MusicControls, \"jcrnd5zhs5Ngt7MGQb9Qzv5tuRQ=\");\n\n_c = MusicControls;\nexport default MusicControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicControls\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/musicControls.js"],"names":["PauseButton","PlayButton","ResumeButton","useEffect","useState","MusicControls","props","songArrayNum","setSongArrayNumber","nextSongHandler","prevSongHandler","currentSongInfo","setCurrentSongInfo","currentSong","setCurrentSong","console","log","musicArrayList","songList","songMaker","song","track","name","uri"],"mappings":"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","sourcesContent":["import PauseButton from \"./pauseButton\"\r\nimport PlayButton from \"./playButton\"\r\nimport ResumeButton from \"./resumeButton\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\n\r\n\r\nfunction MusicControls(props) {\r\n\r\n\r\n    // next and previous logic for songs\r\n    const [songArrayNum, setSongArrayNumber] = useState(0)\r\n\r\n    function nextSongHandler() {\r\n        setSongArrayNumber(songArrayNum + 1)\r\n    }\r\n\r\n    function prevSongHandler() {\r\n        setSongArrayNumber(songArrayNum - 1)\r\n    }\r\n\r\n    // let currentSong = musicArrayList[songArrayNum]\r\n\r\n    const [currentSongInfo, setCurrentSongInfo] = useState(null)\r\n\r\n\r\n    const [currentSong, setCurrentSong] = useState()\r\n\r\n\r\n    console.log(\"print props for music controls\")\r\n\r\n    console.log(props)\r\n\r\n    let musicArrayList = props.songList\r\n\r\n\r\n    // let currentSong = props.songList[songArrayNum]\r\n\r\n    console.log(\"controls array\")\r\n    console.log(musicArrayList)\r\n\r\n    // let numSongsAvailable = musicArrayList.length\r\n\r\n    // console.log(`current music control list is ${numSongsAvailable} songs long`)\r\n\r\n\r\n\r\n    // const [nowSong, setNowSong] = useState(\"now song\")\r\n\r\n\r\n\r\n    function songMaker(song) {\r\n        console.log(\"song maker before setting song\")\r\n        console.log(song)\r\n        setCurrentSong(\r\n            () => song\r\n        )\r\n        console.log(\"currentsong after set\")\r\n        console.log(currentSong)\r\n    }\r\n\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            if (!props.songList) return\r\n\r\n\r\n            songMaker(props.songList[songArrayNum].track)\r\n\r\n            // if (!currentSong.track.name) return\r\n\r\n\r\n        }, [songArrayNum]\r\n    )\r\n\r\n\r\n    console.log(\"data from current song in song conrols\")\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentSong ?\r\n                (\r\n                    <div className=\"bg-info m-3 p-3\">\r\n                        <div>\r\n                            music controls\r\n                            <div>\r\n                                <div>\r\n                                    (<div>\r\n                                        now listening to {currentSong.name}\r\n                                    </div>)\r\n                                </div>\r\n                                <div>\r\n                                    {songArrayNum > 0 &&\r\n                                        <button className=\"btn btn-light\" onClick={prevSongHandler}>prev track</button>\r\n                                    }\r\n\r\n                                    {\r\n                                        songArrayNum < 100 &&\r\n                                        <button className=\"btn btn-light\" onClick={nextSongHandler}>next track</button>\r\n                                    }\r\n                                </div>\r\n                                <PlayButton currentSongCode={currentSong.uri} />\r\n                                <PauseButton />\r\n                                <ResumeButton />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) :\r\n                (<div>Loading...</div>)}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default MusicControls"]},"metadata":{},"sourceType":"module"}