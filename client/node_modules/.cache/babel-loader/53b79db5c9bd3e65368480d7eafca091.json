{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\SpotifySection.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction SpotifySection(props) {\n  _s();\n\n  // use state in order to select a playlist id from local storage\n  const [arrayNum, setArrayNumber] = useState(0);\n\n  function nextHandler() {\n    setArrayNumber(arrayNum + 1);\n  }\n\n  function prevHandler() {\n    setArrayNumber(arrayNum - 1);\n  }\n\n  if (arrayNum < -1) {\n    nextHandler();\n  }\n\n  if (arrayNum > 10) {\n    prevHandler();\n  }\n\n  let playlist = {\n    href: \"x\",\n    id: \"none\",\n    image: \"y\",\n    external_url: \"z\"\n  };\n  const [playlistInfo, setPlaylistInfo] = useState(playlist);\n  var accessToken = localStorage.getItem(\"spotifyToken\");\n  var playlistID = localStorage.getItem(`musicplaylistcode${arrayNum}`);\n  console.log(`current spotify playlist`, playlistID);\n  const [currentPlaylist, setCurrentPlaylist] = useState(playlistID);\n  console.log(\"CURRENT PLAYLIST\", currentPlaylist);\n\n  function updatePlaylistInfo(_ref) {\n    let {\n      href,\n      id,\n      images,\n      external_urls\n    } = _ref;\n    setPlaylistInfo(() => {\n      // const updatedPlaylist = { ...playlist, ...data }\n      playlistInfo.href = href;\n      playlistInfo.id = id;\n      playlistInfo.image = images[0].url;\n      playlistInfo.external_url = external_urls.spotify; // playlistInfo.href = data.href\n      // playlistInfo.id = data.id\n      // playlistInfo.image = data.image\n      // playlistInfo.external_url = data.external_url\n\n      console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo);\n      return playlistInfo;\n    });\n    console.log(\"SET PLAYLIST IS NOW\", playlist);\n  } // if the playlist is equal to none we set the attributes we want\n\n\n  if (playlist.id === \"none\") {\n    axios.post('/spotify-playlist', {\n      userData: {\n        playlistID: `${playlistID}`,\n        accessToken: `${accessToken}`\n      }\n    }).then(res => {\n      console.log(`music playlist res ID ${playlistID}`, res); // the following is printed on the browser console\n\n      console.log(`below is the whole res`); // response print from the spotify custom you need to expand in browser console\n\n      console.log(res);\n      console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\"); // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\n\n      console.log(`reading music 0 placement playlist res: `, res.data); // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\n\n      updatePlaylistInfo(res.data);\n      return playlist;\n    });\n  }\n\n  useEffect(() => {\n    setCurrentPlaylist(playlistID);\n    console.log(\"playlist ID taken from local storage\", playlistID); // function updatePlaylistCode(ID){\n    //     setCurrentPlaylist(playlistID)\n    //     return playlistID\n    // }\n    // updatePlaylistInfo()\n    // axios calls whenever the playlistID changes\n\n    axios.post('/spotify-playlist', {\n      userData: {\n        playlistID: `${playlistID}`,\n        accessToken: `${accessToken}`\n      }\n    }).then(res => {\n      console.log(`music playlist res ID ${playlistID}`, res); // the following is printed on the browser console\n\n      console.log(`below is the whole res`); // response print from the spotify custom you need to expand in browser console\n\n      console.log(res);\n      console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\"); // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\n\n      console.log(`reading music playlist res: `, res.data); // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\n      // var playlistMusicItems = res.data\n      // var playlistCodes = playlistMusicItems.map(playlistCode => {\n      //     return playlistCode.id\n      // })\n      // updateMusicContent(playlistCodes)\n\n      updatePlaylistInfo(res.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [playlistID]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-column justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"align-self-center mb-4 btn-group\",\n        children: [arrayNum > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-light\",\n          onClick: prevHandler,\n          children: \"back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 38\n        }, this), arrayNum < 10 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-light\",\n          onClick: nextHandler,\n          children: \"next playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-title\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: playlistInfo.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SpotifySection, \"/vmDMJIjbTF01+VxxG7w1jW+cEY=\");\n\n_c = SpotifySection;\nexport default SpotifySection;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifySection\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/SpotifySection.js"],"names":["React","Fragment","useEffect","useState","axios","require","SpotifySection","props","arrayNum","setArrayNumber","nextHandler","prevHandler","playlist","href","id","image","external_url","playlistInfo","setPlaylistInfo","accessToken","localStorage","getItem","playlistID","console","log","currentPlaylist","setCurrentPlaylist","updatePlaylistInfo","images","external_urls","url","spotify","post","userData","then","res","data","catch","error"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\n\r\nimport { useState } from \"react\"\r\n\r\nconst axios = require('axios')\r\n\r\n\r\n\r\nfunction SpotifySection(props) {\r\n\r\n    // use state in order to select a playlist id from local storage\r\n    const [arrayNum, setArrayNumber] = useState(0)\r\n\r\n    function nextHandler() {\r\n        setArrayNumber(arrayNum + 1)\r\n    }\r\n\r\n    function prevHandler() {\r\n        setArrayNumber(arrayNum - 1)\r\n    }\r\n\r\n    if (arrayNum < -1) {\r\n        nextHandler()\r\n    }\r\n\r\n    if (arrayNum > 10) {\r\n        prevHandler()\r\n    }\r\n\r\n    let playlist = {\r\n        href: \"x\",\r\n        id: \"none\",\r\n        image: \"y\",\r\n        external_url: \"z\"\r\n    }\r\n\r\n\r\n\r\n    const [playlistInfo, setPlaylistInfo] = useState(playlist)\r\n\r\n\r\n    var accessToken = localStorage.getItem(\"spotifyToken\")\r\n\r\n    var playlistID = localStorage.getItem(`musicplaylistcode${arrayNum}`)\r\n    console.log(`current spotify playlist`, playlistID)\r\n\r\n    const [currentPlaylist, setCurrentPlaylist] = useState(playlistID)\r\n    console.log(\"CURRENT PLAYLIST\", currentPlaylist)\r\n\r\n\r\n    function updatePlaylistInfo({ href, id, images, external_urls }) {\r\n        setPlaylistInfo(\r\n            () => {\r\n                // const updatedPlaylist = { ...playlist, ...data }\r\n                playlistInfo.href = href\r\n                playlistInfo.id = id\r\n                playlistInfo.image = images[0].url\r\n                playlistInfo.external_url = external_urls.spotify\r\n\r\n                // playlistInfo.href = data.href\r\n                // playlistInfo.id = data.id\r\n                // playlistInfo.image = data.image\r\n                // playlistInfo.external_url = data.external_url\r\n                console.log(\"NEW UPDATE ON PLAYLIST\", playlistInfo)\r\n                return playlistInfo\r\n            }\r\n        )\r\n\r\n        console.log(\"SET PLAYLIST IS NOW\", playlist)\r\n    }\r\n\r\n    // if the playlist is equal to none we set the attributes we want\r\n\r\n    if (playlist.id === \"none\") {\r\n        axios.post('/spotify-playlist', {\r\n            userData: {\r\n                playlistID: `${playlistID}`,\r\n                accessToken: `${accessToken}`\r\n            }\r\n        }).then(\r\n            (res) => {\r\n                console.log(`music playlist res ID ${playlistID}`, res)\r\n                // the following is printed on the browser console\r\n                console.log(`below is the whole res`)\r\n                // response print from the spotify custom you need to expand in browser console\r\n                console.log(res)\r\n                console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                console.log(`reading music 0 placement playlist res: `, res.data)\r\n\r\n                // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\r\n\r\n                updatePlaylistInfo(res.data)\r\n\r\n                return playlist\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(\r\n        () => {\r\n            setCurrentPlaylist(playlistID)\r\n            console.log(\"playlist ID taken from local storage\", playlistID)\r\n            // function updatePlaylistCode(ID){\r\n            //     setCurrentPlaylist(playlistID)\r\n            //     return playlistID\r\n            // }\r\n\r\n            // updatePlaylistInfo()\r\n            // axios calls whenever the playlistID changes\r\n            axios.post('/spotify-playlist', {\r\n                userData: {\r\n                    playlistID: `${playlistID}`,\r\n                    accessToken: `${accessToken}`\r\n                }\r\n            }).then(\r\n                (res) => {\r\n                    console.log(`music playlist res ID ${playlistID}`, res)\r\n                    // the following is printed on the browser console\r\n                    console.log(`below is the whole res`)\r\n                    // response print from the spotify custom you need to expand in browser console\r\n                    console.log(res)\r\n                    console.log(\"THE LINE ABOVE IS THE RES FROM THE SPOTIFY CUSTOM YOU NEED TO EXPAND IT INTO DATA THEN PLAYLISTS\")\r\n                    // NEED TO FORMAT AS STRING COMMA OBJECT FOR IT TO READ IN CONSOLE\r\n                    console.log(`reading music playlist res: `, res.data)\r\n\r\n                    // now we will need a way to use the tracks within the playlist located as res.data.tracks.items\r\n\r\n                    // var playlistMusicItems = res.data\r\n                    // var playlistCodes = playlistMusicItems.map(playlistCode => {\r\n                    //     return playlistCode.id\r\n                    // })\r\n                    // updateMusicContent(playlistCodes)\r\n\r\n                    updatePlaylistInfo(res.data)\r\n\r\n                }\r\n            ).catch(\r\n                (error) => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n\r\n\r\n\r\n\r\n\r\n        }, [playlistID]\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"d-flex flex-column justify-content-center\">\r\n                <div className=\"align-self-center mb-4 btn-group\">\r\n                    {arrayNum > 0 && <button className=\"btn btn-outline-light\" onClick={prevHandler}>back</button>}\r\n                    {arrayNum < 10 && <button className=\"btn btn-outline-light\" onClick={nextHandler}>next playlist</button>}\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div>\r\n\r\n                    {/* create a fetch request / axios request to our custom api point to search for and pull playlist data whenever the page renders or the playlist slot on line 25 is changed by hitting next playlist */}\r\n\r\n                    <div className=\"card\">\r\n                        <div className=\"card-body\">\r\n                            <div className=\"card-title\">\r\n                                <div>\r\n                                    {playlistInfo.id}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n                        {/* create a list of songs component under the album component */}\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default SpotifySection"]},"metadata":{},"sourceType":"module"}