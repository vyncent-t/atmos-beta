{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\n\nexports.type = function (str) {\n  return str.split(/ *; */).shift();\n};\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\n\nexports.params = function (val) {\n  var obj = {};\n\n  var _iterator = _createForOfIteratorHelper(val.split(/ *; */)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var str = _step.value;\n      var parts = str.split(/ *= */);\n      var key = parts.shift();\n\n      var _val = parts.shift();\n\n      if (key && _val) obj[key] = _val;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return obj;\n};\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\n\nexports.parseLinks = function (val) {\n  var obj = {};\n\n  var _iterator2 = _createForOfIteratorHelper(val.split(/ *, */)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var str = _step2.value;\n      var parts = str.split(/ *; */);\n      var url = parts[0].slice(1, -1);\n      var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n      obj[rel] = url;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return obj;\n};\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\n\nexports.cleanHeader = function (header, changesOrigin) {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host; // secuirty\n\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n\n  return header;\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;AAQAA,OAAO,CAACC,IAARD,GAAe,UAACE,GAAD;AAAA,SAASA,GAAG,CAACC,KAAJD,CAAU,OAAVA,EAAmBE,KAAnBF,EAAT;AAAf;AAEA;;;;;;;;;AAQAF,OAAO,CAACK,MAARL,GAAiB,UAACM,GAAD,EAAS;AACxB,MAAMC,GAAG,GAAG,EAAZ;;AADwB,6CAEND,GAAG,CAACH,KAAJG,CAAU,OAAVA,CAFM;AAAA;;AAAA;AAExB,wDAAsC;AAAA,UAA3BJ,GAA2B;AACpC,UAAMM,KAAK,GAAGN,GAAG,CAACC,KAAJD,CAAU,OAAVA,CAAd;AACA,UAAMO,GAAG,GAAGD,KAAK,CAACJ,KAANI,EAAZ;;AACA,UAAMF,IAAG,GAAGE,KAAK,CAACJ,KAANI,EAAZ;;AAEA,UAAIC,GAAG,IAAIH,IAAX,EAAgBC,GAAG,CAACE,GAAD,CAAHF,GAAWD,IAAXC;AACjB;AARuB;AAAAG;AAAA;AAAAA;AAAA;;AAUxB,SAAOH,GAAP;AAVF;AAaA;;;;;;;;;AAQAP,OAAO,CAACW,UAARX,GAAqB,UAACM,GAAD,EAAS;AAC5B,MAAMC,GAAG,GAAG,EAAZ;;AAD4B,8CAEVD,GAAG,CAACH,KAAJG,CAAU,OAAVA,CAFU;AAAA;;AAAA;AAE5B,2DAAsC;AAAA,UAA3BJ,GAA2B;AACpC,UAAMM,KAAK,GAAGN,GAAG,CAACC,KAAJD,CAAU,OAAVA,CAAd;AACA,UAAMU,GAAG,GAAGJ,KAAK,CAAC,CAAD,CAALA,CAASK,KAATL,CAAe,CAAfA,EAAkB,CAAC,CAAnBA,CAAZ;AACA,UAAMM,GAAG,GAAGN,KAAK,CAAC,CAAD,CAALA,CAASL,KAATK,CAAe,OAAfA,EAAwB,CAAxBA,EAA2BK,KAA3BL,CAAiC,CAAjCA,EAAoC,CAAC,CAArCA,CAAZ;AACAD,SAAG,CAACO,GAAD,CAAHP,GAAWK,GAAXL;AACD;AAP2B;AAAAQ;AAAA;AAAAA;AAAA;;AAS5B,SAAOR,GAAP;AATF;AAYA;;;;;;;;;AAQAP,OAAO,CAACgB,WAARhB,GAAsB,UAACiB,MAAD,EAASC,aAAT,EAA2B;AAC/C,SAAOD,MAAM,CAAC,cAAD,CAAb;AACA,SAAOA,MAAM,CAAC,gBAAD,CAAb;AACA,SAAOA,MAAM,CAAC,mBAAD,CAAb;AACA,SAAOA,MAAM,CAACE,IAAd,CAJ+C,CAK/C;;AACA,MAAID,aAAJ,EAAmB;AACjB,WAAOD,MAAM,CAACG,aAAd;AACA,WAAOH,MAAM,CAACI,MAAd;AACD;;AAED,SAAOJ,MAAP;AAXF","names":["exports","type","str","split","shift","params","val","obj","parts","key","_iterator","parseLinks","url","slice","rel","_iterator2","cleanHeader","header","changesOrigin","host","authorization","cookie"],"sources":["../src/utils.js"],"sourcesContent":["/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = (str) => str.split(/ *; */).shift();\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = (val) => {\n  const obj = {};\n  for (const str of val.split(/ *; */)) {\n    const parts = str.split(/ *= */);\n    const key = parts.shift();\n    const val = parts.shift();\n\n    if (key && val) obj[key] = val;\n  }\n\n  return obj;\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = (val) => {\n  const obj = {};\n  for (const str of val.split(/ *, */)) {\n    const parts = str.split(/ *; */);\n    const url = parts[0].slice(1, -1);\n    const rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n  }\n\n  return obj;\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = (header, changesOrigin) => {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header.host;\n  // secuirty\n  if (changesOrigin) {\n    delete header.authorization;\n    delete header.cookie;\n  }\n\n  return header;\n};\n"]},"metadata":{},"sourceType":"script"}