{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jento\\\\Desktop\\\\Projects\\\\main projects\\\\atmos-project\\\\client\\\\src\\\\components\\\\songSection.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport SongCard from \"./songCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SongSection(props) {\n  // const [songsLoading, setSongsLoading] = useState(true)\n  // replace props.whatever.we to correct data format\n  // replace this too\n  let musicList = props.playlistInfo.tracks;\n  console.log(\"printing array of tracks in song section\");\n  console.log(musicList);\n  const songList = musicList.flatMap((key, index) => {\n    return Object.keys(key).map(song => ({}));\n  }); // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\n  // if (musicList.length > 5) {\n  //     setSongsLoading(true)\n  // } else {\n  //     setSongsLoading(false)\n  // }\n\n  console.log(\"tracks data from playlist\", musicList);\n  const content = \"nice\"; // const content = songsLoading ?\n  //     (<div>...is Loading</div>)\n  //     :\n  //     (<div> Loading Complete\n  //     </div>)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_c = SongSection;\nexport default SongSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongSection\");","map":{"version":3,"sources":["C:/Users/jento/Desktop/Projects/main projects/atmos-project/client/src/components/songSection.js"],"names":["React","Fragment","useEffect","useState","SongCard","SongSection","props","musicList","playlistInfo","tracks","console","log","songList","flatMap","key","index","Object","keys","map","song","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAIxB;AAGA;AACA;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,YAAN,CAAmBC,MAAnC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AAEA,QAAMK,QAAQ,GAAGL,SAAS,CAACM,OAAV,CACb,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACZ,WAAOC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,GAAjB,CACHC,IAAI,KAAK,EAAL,CADD,CAAP;AAKH,GAPY,CAAjB,CAdwB,CA0BxB;AACA;AACA;AACA;AACA;AACA;;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCJ,SAAzC;AAGA,QAAMa,OAAO,GAAG,MAAhB,CAnCwB,CAoCxB;AACA;AACA;AACA;AACA;;AAIA,sBACI;AAAA,cACKA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAjDQf,W;AAmDT,eAAeA,WAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\n\r\nimport SongCard from \"./songCard\"\r\n\r\n\r\n\r\nfunction SongSection(props) {\r\n\r\n\r\n\r\n    // const [songsLoading, setSongsLoading] = useState(true)\r\n\r\n\r\n    // replace props.whatever.we to correct data format\r\n    // replace this too\r\n    let musicList = props.playlistInfo.tracks\r\n\r\n    console.log(\"printing array of tracks in song section\")\r\n    console.log(musicList)\r\n\r\n    const songList = musicList.flatMap(\r\n        (key, index) => {\r\n            return Object.keys(key).map(\r\n                song => ({\r\n\r\n                })\r\n            )\r\n        }\r\n    )\r\n\r\n\r\n\r\n    // cheap work around to force the component to rerender, setting the text on the page to is loading then to loading complete / incoming data\r\n    // if (musicList.length > 5) {\r\n    //     setSongsLoading(true)\r\n    // } else {\r\n    //     setSongsLoading(false)\r\n    // }\r\n    console.log(\"tracks data from playlist\", musicList)\r\n\r\n\r\n    const content = \"nice\"\r\n    // const content = songsLoading ?\r\n    //     (<div>...is Loading</div>)\r\n    //     :\r\n    //     (<div> Loading Complete\r\n    //     </div>)\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongSection"]},"metadata":{},"sourceType":"module"}